// frontend/script.js - Professional Edition

// API Configuration
const API_BASE = '/api';

// State Management
const state = {
    subjects: [],
    classes: [],
    tasks: [],
    kpis: [],
    currentPage: 'dashboard',
    charts: {},
    progressHistory: [],
    milestones: []
};

// Initialize Application
document.addEventListener('DOMContentLoaded', async function() {
    await initializeApp();
    setupEventListeners();
    showPage('dashboard');
});

async function initializeApp() {
    try {
        // Show loading state
        showLoadingState();
        
        // Load all data
        await Promise.all([
            loadClasses(),
            loadSubjects(),
            loadKPIs(),
            loadTasks(),
            loadProgressHistory()
        ]);
        
        // Initialize components
        initializeSidebar();
        initializeSearch();
        initializeNotifications();
        
        hideLoadingState();
    } catch (error) {
        console.error('Failed to initialize app:', error);
        showAlert('Failed to load application data', 'danger');
    }
}

// Navigation Functions
function showPage(pageId) {
    // Update state
    state.currentPage = pageId;
    
    // Hide all pages
    document.querySelectorAll('.page').forEach(page => {
        page.style.display = 'none';
    });
    
    // Show selected page
    const page = document.getElementById(pageId + '-page');
    if (page) {
        page.style.display = 'block';
    }
    
    // Update nav items
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // Find and activate the clicked nav item
    const activeNav = document.querySelector(`.nav-item[onclick*="${pageId}"]`);
    if (activeNav) {
        activeNav.classList.add('active');
    }
    
    // Update page title
    const titles = {
        'dashboard': 'Dashboard',
        'subjects': 'Subjects & KPIs',
        'analytics': 'Analytics & Insights',
        'tasks': 'Daily Tasks',
        'report-builder': 'Custom Report Builder',
        'scheduled-reports': 'Scheduled Reports',
        'export': 'Export Data',
        'classes': 'Class Management',
        'progress': 'Progress Tracking',
        'milestones': 'Milestones & Rewards'
    };
    document.getElementById('page-title').textContent = titles[pageId] || 'Syllabus Tracker Pro';
    
    // Load page-specific content
    loadPageContent(pageId);
}

async function loadPageContent(pageId) {
    switch (pageId) {
        case 'dashboard':
            await loadDashboard();
            break;
        case 'subjects':
            await loadSubjectsPage();
            break;
        case 'analytics':
            await loadAnalyticsPage();
            break;
        case 'tasks':
            await loadTasksPage();
            break;
        case 'report-builder':
            initializeReportBuilder();
            break;
        case 'scheduled-reports':
            await loadScheduledReports();
            break;
        case 'export':
            await loadExportPage();
            break;
        case 'classes':
            await loadClassesPage();
            break;
        case 'progress':
            await loadProgressPage();
            break;
        case 'milestones':
            await loadMilestonesPage();
            break;
    }
}

// Data Loading Functions
async function loadClasses() {
    try {
        const response = await fetch(`${API_BASE}/classes`);
        if (!response.ok) throw new Error('Failed to load classes');
        state.classes = await response.json();
    } catch (error) {
        console.error('Error loading classes:', error);
        state.classes = [];
    }
}

async function loadSubjects() {
    try {
        const response = await fetch(`${API_BASE}/syllabus/subjects`);
        if (!response.ok) throw new Error('Failed to load subjects');
        state.subjects = await response.json();
    } catch (error) {
        console.error('Error loading subjects:', error);
        state.subjects = [];
    }
}

async function loadKPIs() {
    try {
        const response = await fetch(`${API_BASE}/kpis`);
        if (!response.ok) throw new Error('Failed to load KPIs');
        state.kpis = await response.json();
    } catch (error) {
        console.error('Error loading KPIs:', error);
        state.kpis = [];
    }
}

async function loadTasks() {
    try {
        const today = new Date().toISOString().split('T')[0];
        const response = await fetch(`${API_BASE}/tasks?date=${today}`);
        if (!response.ok) throw new Error('Failed to load tasks');
        state.tasks = await response.json();
        updateTaskBadge();
    } catch (error) {
        console.error('Error loading tasks:', error);
        state.tasks = [];
    }
}

async function loadProgressHistory() {
    try {
        const response = await fetch(`${API_BASE}/analytics/trends?period=30`);
        if (!response.ok) throw new Error('Failed to load progress history');
        state.progressHistory = await response.json();
    } catch (error) {
        console.error('Error loading progress history:', error);
        state.progressHistory = [];
    }
}

// Dashboard Functions
async function loadDashboard() {
    // Update stats
    updateDashboardStats();
    
    // Initialize charts
    initializeDashboardCharts();
    
    // Load recent activity
    await loadRecentActivity();
}

function updateDashboardStats() {
    // Calculate statistics
    const totalSubjects = state.subjects.length;
    let totalTopics = 0;
    let completedTopics = 0;
    let totalKPIs = state.kpis.length;
    let achievedKPIs = state.kpis.filter(k => k.achieved).length;
    
    state.subjects.forEach(subject => {
        if (subject.chapters) {
            subject.chapters.forEach(chapter => {
                if (chapter.topics) {
                    totalTopics += chapter.topics.length;
                    completedTopics += chapter.topics.filter(t => t.completed).length;
                }
            });
        }
    });
    
    const overallProgress = totalTopics > 0 ? (completedTopics / totalTopics) * 100 : 0;
    
    // Update UI
    updateStatCard('Total Subjects', totalSubjects, '+12% from last month', 'positive');
    updateStatCard('Overall Progress', `${Math.round(overallProgress)}%`, null, null, overallProgress);
    updateStatCard('KPIs Achieved', achievedKPIs, `↑ ${Math.round((achievedKPIs/totalKPIs)*100)}% achievement rate`, 'positive');
    updateStatCard('Active Tasks', state.tasks.filter(t => !t.completed).length, '↓ 3% from yesterday', 'negative');
}

function updateStatCard(label, value, change, changeType, progressValue) {
    const cards = document.querySelectorAll('.stat-card');
    const card = Array.from(cards).find(c => c.querySelector('.stat-label').textContent === label);
    
    if (card) {
        card.querySelector('.stat-value').textContent = value;
        
        if (change) {
            const changeEl = card.querySelector('.stat-change');
            if (changeEl) {
                changeEl.textContent = change;
                changeEl.className = `stat-change ${changeType}`;
            }
        }
        
        if (progressValue !== undefined) {
            const progressContainer = card.querySelector('.progress-container');
            if (progressContainer) {
                const progressFill = progressContainer.querySelector('.progress-fill');
                if (progressFill) {
                    progressFill.style.width = `${progressValue}%`;
                }
            }
        }
    }
}

// Chart Functions
function initializeDashboardCharts() {
    // Progress Trend Chart
    const progressCtx = document.getElementById('progressChart');
    if (progressCtx && progressCtx.getContext) {
        if (state.charts.progress) {
            state.charts.progress.destroy();
        }
        
        const dates = state.progressHistory.map(h => h._id.date);
        const progress = state.progressHistory.map(h => h.avgProgress);
        
        state.charts.progress = new Chart(progressCtx.getContext('2d'), {
            type: 'line',
            data: {
                labels: dates,
                datasets: [{
                    label: 'Average Progress',
                    data: progress,
                    borderColor: '#6366f1',
                    backgroundColor: 'rgba(99, 102, 241, 0.1)',
                    tension: 0.3,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: (context) => `Progress: ${context.parsed.y.toFixed(1)}%`
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        ticks: {
                            callback: (value) => value + '%'
                        }
                    }
                }
            }
        });
    }
    
    // Department Comparison Chart
    const deptCtx = document.getElementById('departmentChart');
    if (deptCtx && deptCtx.getContext) {
        if (state.charts.department) {
            state.charts.department.destroy();
        }
        
        const departments = ['Mathematics', 'Science', 'English', 'Social Studies', 'Arts'];
        const deptProgress = departments.map(dept => {
            const deptSubjects = state.subjects.filter(s => s.department === dept);
            if (deptSubjects.length === 0) return 0;
            
            let totalProgress = 0;
            deptSubjects.forEach(subject => {
                let subjectTopics = 0;
                let completedTopics = 0;
                
                if (subject.chapters) {
                    subject.chapters.forEach(chapter => {
                        if (chapter.topics) {
                            subjectTopics += chapter.topics.length;
                            completedTopics += chapter.topics.filter(t => t.completed).length;
                        }
                    });
                }
                
                totalProgress += subjectTopics > 0 ? (completedTopics / subjectTopics) * 100 : 0;
            });
            
            return totalProgress / deptSubjects.length;
        });
        
        state.charts.department = new Chart(deptCtx.getContext('2d'), {
            type: 'bar',
            data: {
                labels: departments,
                datasets: [{
                    label: 'Average Progress %',
                    data: deptProgress,
                    backgroundColor: [
                        'rgba(99, 102, 241, 0.8)',
                        'rgba(139, 92, 246, 0.8)',
                        'rgba(16, 185, 129, 0.8)',
                        'rgba(245, 158, 11, 0.8)',
                        'rgba(239, 68, 68, 0.8)'
                    ],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        ticks: {
                            callback: (value) => value + '%'
                        }
                    }
                }
            }
        });
    }
}

// Subject & KPI Management
async function loadSubjectsPage() {
    // Use the complete version with full management features
    await loadSubjectsPageComplete();
}

async function updateKPI(kpiId, achieved) {
    try {
        const response = await fetch(`${API_BASE}/kpis/${kpiId}`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ achieved })
        });
        
        if (!response.ok) throw new Error('Failed to update KPI');
        
        // Reload KPIs and refresh page
        await loadKPIs();
        if (state.currentPage === 'subjects') {
            await loadSubjectsPage();
        }
        
        showAlert('KPI updated successfully', 'success');
    } catch (error) {
        console.error('Error updating KPI:', error);
        showAlert('Failed to update KPI', 'danger');
        
        // Revert checkbox state
        const checkbox = document.querySelector(`input[onchange*="${kpiId}"]`);
        if (checkbox) {
            checkbox.checked = !achieved;
        }
    }
}

// Task Management
async function loadTasksPage() {
    const container = document.getElementById('task-list');
    if (!container) return;
    
    if (state.tasks.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">📋</div>
                <h3>No tasks for today</h3>
                <p>Generate tasks from your syllabus or create custom tasks</p>
                <button class="btn btn-primary" onclick="generateDailyTasks()">Generate Tasks</button>
            </div>
        `;
        return;
    }
    
    // Group tasks by priority
    const highPriority = state.tasks.filter(t => t.priority === 'high' && !t.completed);
    const mediumPriority = state.tasks.filter(t => t.priority === 'medium' && !t.completed);
    const lowPriority = state.tasks.filter(t => t.priority === 'low' && !t.completed);
    const completed = state.tasks.filter(t => t.completed);
    
    container.innerHTML = `
        <div class="task-sections">
            ${renderTaskSection('High Priority', highPriority, 'high')}
            ${renderTaskSection('Medium Priority', mediumPriority, 'medium')}
            ${renderTaskSection('Low Priority', lowPriority, 'low')}
            ${renderTaskSection('Completed', completed, 'completed')}
        </div>
    `;
}

function renderTaskSection(title, tasks, priority) {
    if (tasks.length === 0) return '';
    
    return `
        <div class="task-section">
            <h4 class="task-section-title">${title} (${tasks.length})</h4>
            <div class="task-list">
                ${tasks.map(task => `
                    <div class="task-card priority-${priority} ${task.completed ? 'completed' : ''}">
                        <div class="task-header">
                            <div class="task-info">
                                <h5>${task.title}</h5>
                                <div class="task-meta">
                                    <span class="task-subject">${task.subject?.name || 'No Subject'}</span>
                                    <span class="task-class">${task.class?.name || 'No Class'}</span>
                                </div>
                            </div>
                            <div class="task-actions">
                                <button class="btn-icon" onclick="toggleTask('${task._id}')">
                                    ${task.completed ? '✅' : '⭕'}
                                </button>
                                <button class="btn-icon" onclick="editTask('${task._id}')">✏️</button>
                            </div>
                        </div>
                        ${task.notes ? `<div class="task-notes">${task.notes}</div>` : ''}
                    </div>
                `).join('')}
            </div>
        </div>
    `;
}

async function toggleTask(taskId) {
    try {
        const response = await fetch(`${API_BASE}/tasks/${taskId}/complete`, {
            method: 'PATCH'
        });
        
        if (!response.ok) throw new Error('Failed to update task');
        
        await loadTasks();
        await loadTasksPage();
        showAlert('Task updated successfully', 'success');
    } catch (error) {
        console.error('Error updating task:', error);
        showAlert('Failed to update task', 'danger');
    }
}

async function generateDailyTasks() {
    try {
        const response = await fetch(`${API_BASE}/tasks/generate`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                startDate: new Date().toISOString().split('T')[0],
                endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
            })
        });
        
        if (!response.ok) throw new Error('Failed to generate tasks');
        
        const result = await response.json();
        showAlert(result.message, 'success');
        
        await loadTasks();
        await loadTasksPage();
    } catch (error) {
        console.error('Error generating tasks:', error);
        showAlert('Failed to generate tasks', 'danger');
    }
}

// Analytics Functions
async function loadAnalyticsPage() {
    // Load analytics data
    const [trendsResponse, forecastResponse, comparativeResponse] = await Promise.all([
        fetch(`${API_BASE}/analytics/trends?period=90`),
        fetch(`${API_BASE}/analytics/forecast`),
        fetch(`${API_BASE}/analytics/comparative?groupBy=department`)
    ]);
    
    const trends = await trendsResponse.json();
    const forecast = await forecastResponse.json();
    const comparative = await comparativeResponse.json();
    
    // Update analytics stats
    updateAnalyticsStats(trends, forecast, comparative);
    
    // Initialize analytics charts
    initializeAnalyticsCharts(trends, forecast, comparative);
}

function updateAnalyticsStats(trends, forecast, comparative) {
    // Calculate average completion rate
    const avgCompletion = trends.length > 0 
        ? trends.reduce((sum, t) => sum + t.avgProgress, 0) / trends.length 
        : 0;
    
    // Update stat cards
    const statsContainer = document.querySelector('#analytics-page .stats-grid');
    if (statsContainer) {
        statsContainer.innerHTML = `
            <div class="stat-card">
                <div class="stat-label">Average Completion Rate</div>
                <div class="stat-value">${avgCompletion.toFixed(1)}%</div>
                <div class="stat-change positive">↑ 5.2% this month</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Predicted Completion Date</div>
                <div class="stat-value">${forecast.estimatedCompletionDate ? new Date(forecast.estimatedCompletionDate).toLocaleDateString() : 'N/A'}</div>
                <div class="stat-change">${forecast.currentProgress > 80 ? 'Ahead of schedule' : 'On track'}</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Department Leader</div>
                <div class="stat-value">${comparative.data[0]?._id || 'N/A'}</div>
                <div class="stat-change positive">${comparative.data[0]?.avgProgress.toFixed(0)}% completion rate</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">At-Risk Subjects</div>
                <div class="stat-value">${state.subjects.filter(s => calculateSubjectProgress(s) < 50).length}</div>
                <div class="stat-change negative">Need immediate attention</div>
            </div>
        `;
    }
}

function calculateSubjectProgress(subject) {
    let totalTopics = 0;
    let completedTopics = 0;
    
    if (subject.chapters) {
        subject.chapters.forEach(chapter => {
            if (chapter.topics) {
                totalTopics += chapter.topics.length;
                completedTopics += chapter.topics.filter(t => t.completed).length;
            }
        });
    }
    
    return totalTopics > 0 ? (completedTopics / totalTopics) * 100 : 0;
}

// Export Functions
async function exportData(format) {
    try {
        let response;
        const exportBtn = event.target;
        exportBtn.disabled = true;
        exportBtn.textContent = 'Exporting...';
        
        switch (format) {
            case 'excel':
                response = await fetch(`${API_BASE}/export/excel`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ type: 'all', filters: {} })
                });
                break;
                
            case 'csv':
                response = await fetch(`${API_BASE}/export/csv?dataType=subjects`);
                break;
                
            case 'json':
                response = await fetch(`${API_BASE}/export/json`);
                break;
                
            default:
                throw new Error('Invalid export format');
        }
        
        if (!response.ok) throw new Error('Export failed');
        
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `syllabus-export-${new Date().toISOString().split('T')[0]}.${format}`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        showAlert(`Data exported successfully as ${format.toUpperCase()}`, 'success');
    } catch (error) {
        console.error('Export error:', error);
        showAlert('Failed to export data', 'danger');
    } finally {
        const exportBtn = event.target;
        exportBtn.disabled = false;
        exportBtn.textContent = `Export as ${format.toUpperCase()}`;
    }
}

// Modal Functions
function openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.add('active');
    }
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.remove('active');
        // Reset form if exists
        const form = modal.querySelector('form');
        if (form) {
            form.reset();
        }
    }
}

// Utility Functions
function showAlert(message, type = 'info') {
    const alertContainer = document.getElementById('alert-container') || createAlertContainer();
    
    const alert = document.createElement('div');
    alert.className = `alert alert-${type}`;
    alert.innerHTML = `
        <span>${message}</span>
        <button class="alert-close" onclick="this.parentElement.remove()">×</button>
    `;
    
    alertContainer.appendChild(alert);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (alert.parentElement) {
            alert.remove();
        }
    }, 5000);
}

function createAlertContainer() {
    const container = document.createElement('div');
    container.id = 'alert-container';
    container.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 9999; max-width: 400px;';
    document.body.appendChild(container);
    return container;
}

function showLoadingState() {
    const loader = document.createElement('div');
    loader.id = 'app-loader';
    loader.innerHTML = '<div class="spinner"></div><p>Loading...</p>';
    loader.style.cssText = 'position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(255,255,255,0.9); display: flex; flex-direction: column; align-items: center; justify-content: center; z-index: 9999;';
    document.body.appendChild(loader);
}

function hideLoadingState() {
    const loader = document.getElementById('app-loader');
    if (loader) {
        loader.remove();
    }
}

function updateTaskBadge() {
    const activeTasks = state.tasks.filter(t => !t.completed).length;
    const badge = document.querySelector('.nav-item[onclick*="tasks"] .nav-item-badge');
    if (badge) {
        badge.textContent = activeTasks;
        badge.style.display = activeTasks > 0 ? 'inline-block' : 'none';
    }
}

// Event Listeners
function setupEventListeners() {
    // Global click handler for modals
    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('modal')) {
            const modalId = e.target.id;
            closeModal(modalId);
        }
    });
    
    // Form submissions
    document.addEventListener('submit', (e) => {
        if (e.target.matches('#subjectForm')) {
            e.preventDefault();
            saveSubject();
        } else if (e.target.matches('#kpiForm')) {
            e.preventDefault();
            saveKPI();
        }
    });
    
    // Search functionality
    const searchInput = document.querySelector('.search-input');
    if (searchInput) {
        searchInput.addEventListener('input', debounce(handleSearch, 300));
    }
}

// Search functionality
function handleSearch(e) {
    const query = e.target.value.toLowerCase();
    
    // Search based on current page
    switch (state.currentPage) {
        case 'subjects':
            filterSubjects(query);
            break;
        case 'classes':
            filterClasses(query);
            break;
        case 'tasks':
            filterTasks(query);
            break;
    }
}

// Utility function for debouncing
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Initialize sidebar functions
function initializeSidebar() {
    // Mobile sidebar toggle
    const toggleBtn = document.querySelector('.btn-icon[onclick*="toggleSidebar"]');
    if (toggleBtn) {
        toggleBtn.addEventListener('click', toggleSidebar);
    }
}

function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    if (sidebar) {
        sidebar.classList.toggle('open');
    }
}

// Initialize search
function initializeSearch() {
    const searchInput = document.querySelector('.search-input');
    if (searchInput) {
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                performSearch(e.target.value);
            }
        });
    }
}

// Initialize notifications
function initializeNotifications() {
    // Check for overdue tasks
    const overdueTasks = state.tasks.filter(task => {
        if (task.completed) return false;
        const deadline = new Date(task.deadline);
        return deadline < new Date();
    });
    
    if (overdueTasks.length > 0) {
        showAlert(`You have ${overdueTasks.length} overdue tasks!`, 'warning');
    }
}

// Add KPI field in modal
function addKPIField() {
    const kpiList = document.getElementById('kpi-list');
    const newKPI = document.createElement('div');
    newKPI.className = 'kpi-item';
    newKPI.style.marginTop = '8px';
    newKPI.innerHTML = `
        <input type="text" class="form-input" placeholder="Enter KPI...">
        <button type="button" class="btn btn-sm btn-danger" onclick="this.parentElement.remove()">×</button>
    `;
    kpiList.appendChild(newKPI);
}

// Save subject with KPIs
async function saveSubject() {
    try {
        const form = document.getElementById('subjectForm');
        const formData = new FormData(form);
        
        const subjectData = {
            name: formData.get('name'),
            code: formData.get('code'),
            department: formData.get('department'),
            class: formData.get('class'),
            deadline: formData.get('deadline'),
            description: formData.get('description')
        };
        
        // Validate required fields
        if (!subjectData.name || !subjectData.code || !subjectData.class || !subjectData.deadline) {
            showAlert('Please fill in all required fields', 'warning');
            return;
        }
        
        // Save subject
        const response = await fetch(`${API_BASE}/syllabus/subjects`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(subjectData)
        });
        
        if (!response.ok) throw new Error('Failed to save subject');
        
        const subject = await response.json();
        
        // Save KPIs
        const kpiInputs = document.querySelectorAll('#kpi-list input');
        for (const input of kpiInputs) {
            if (input.value.trim()) {
                await fetch(`${API_BASE}/kpis`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        subject: subject._id,
                        title: input.value.trim(),
                        target: 100,
                        deadline: subjectData.deadline,
                        priority: 'medium'
                    })
                });
            }
        }
        
        // Reload data and close modal
        await Promise.all([loadSubjects(), loadKPIs()]);
        closeModal('addSubjectModal');
        showAlert('Subject created successfully!', 'success');
        
        // Refresh current page
        loadPageContent(state.currentPage);
    } catch (error) {
        console.error('Error saving subject:', error);
        showAlert('Failed to save subject', 'danger');
    }
}

// Update openModal to populate class dropdown
const originalOpenModal = window.openModal;
window.openModal = function(modalId) {
    originalOpenModal(modalId);
    
    // If opening add subject modal, populate classes
    if (modalId === 'addSubjectModal') {
        const classSelect = document.getElementById('subjectClass');
        if (classSelect) {
            classSelect.innerHTML = '<option value="">Select Class</option>';
            state.classes.forEach(cls => {
                const option = document.createElement('option');
                option.value = cls._id;
                option.textContent = cls.name;
                classSelect.appendChild(option);
            });
        }
    }
};

// Report Builder Functions
function initializeReportBuilder() {
    const widgets = document.querySelectorAll('.widget-item');
    const canvas = document.getElementById('report-canvas');
    
    if (!widgets.length || !canvas) return;
    
    widgets.forEach(widget => {
        widget.addEventListener('dragstart', handleDragStart);
        widget.addEventListener('dragend', handleDragEnd);
    });
    
    canvas.addEventListener('dragover', handleDragOver);
    canvas.addEventListener('drop', handleDrop);
}

function handleDragStart(e) {
    e.dataTransfer.effectAllowed = 'copy';
    e.dataTransfer.setData('text/plain', e.target.textContent);
    e.target.classList.add('dragging');
}

function handleDragEnd(e) {
    e.target.classList.remove('dragging');
}

function handleDragOver(e) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'copy';
}

function handleDrop(e) {
    e.preventDefault();
    const widgetText = e.dataTransfer.getData('text/plain');
    const canvas = document.getElementById('report-canvas');
    
    // Clear placeholder if it exists
    if (canvas.querySelector('div[style*="text-align: center"]')) {
        canvas.innerHTML = '';
    }
    
    // Add widget to canvas
    const widget = createReportWidget(widgetText);
    canvas.appendChild(widget);
}

function createReportWidget(type) {
    const widget = document.createElement('div');
    widget.className = 'card report-widget';
    widget.innerHTML = `
        <div class="card-header">
            <h3 class="card-title">${type}</h3>
            <div class="widget-actions">
                <button class="btn-icon btn-sm" onclick="configureWidget(this)">⚙️</button>
                <button class="btn-icon btn-sm" onclick="this.closest('.report-widget').remove()">×</button>
            </div>
        </div>
        <div class="widget-content" style="min-height: 200px;">
            <div class="widget-placeholder">
                <canvas id="widget-${Date.now()}"></canvas>
            </div>
        </div>
    `;
    
    // Initialize widget content based on type
    setTimeout(() => initializeWidgetContent(widget, type), 100);
    
    return widget;
}

function initializeWidgetContent(widget, type) {
    const canvas = widget.querySelector('canvas');
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    
    // Create sample chart based on widget type
    switch (type.trim()) {
        case '📊 Progress Chart':
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
                    datasets: [{
                        label: 'Progress',
                        data: [20, 35, 50, 65],
                        borderColor: '#6366f1',
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
            break;
            
        case '📈 Trend Analysis':
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr'],
                    datasets: [{
                        label: 'Completion Rate',
                        data: [65, 70, 75, 82],
                        backgroundColor: '#8b5cf6'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
            break;
            
        case '🎯 KPI Summary':
            // Replace canvas with KPI summary
            const kpiSummary = document.createElement('div');
            kpiSummary.innerHTML = `
                <div style="padding: 20px;">
                    <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 16px;">
                        <div style="text-align: center;">
                            <div style="font-size: 32px; font-weight: bold; color: #10b981;">85%</div>
                            <div style="color: #666;">KPIs Achieved</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 32px; font-weight: bold; color: #f59e0b;">15</div>
                            <div style="color: #666;">Pending KPIs</div>
                        </div>
                    </div>
                </div>
            `;
            canvas.parentElement.replaceChild(kpiSummary, canvas);
            break;
    }
}

// Export to different formats
async function loadExportPage() {
    const container = document.querySelector('#export-page');
    if (!container) return;
    
    container.innerHTML = `
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Export Data</h3>
            </div>
            <div class="card-body">
                <p style="margin-bottom: 24px;">Choose your preferred format to export the syllabus tracker data:</p>
                
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px;">
                    <div class="export-option">
                        <button class="btn btn-primary" onclick="exportData('excel')" style="width: 100%; padding: 20px;">
                            📊 Export as Excel
                        </button>
                        <p style="margin-top: 8px; font-size: 14px; color: #666;">
                            Complete data with multiple sheets
                        </p>
                    </div>
                    
                    <div class="export-option">
                        <button class="btn btn-primary" onclick="exportData('csv')" style="width: 100%; padding: 20px;">
                            📄 Export as CSV
                        </button>
                        <p style="margin-top: 8px; font-size: 14px; color: #666;">
                            Simple format for spreadsheets
                        </p>
                    </div>
                    
                    <div class="export-option">
                        <button class="btn btn-primary" onclick="exportData('json')" style="width: 100%; padding: 20px;">
                            🔧 Export as JSON
                        </button>
                        <p style="margin-top: 8px; font-size: 14px; color: #666;">
                            Developer-friendly format
                        </p>
                    </div>
                    
                    <div class="export-option">
                        <button class="btn btn-primary" onclick="exportData('pdf')" style="width: 100%; padding: 20px;">
                            📑 Export as PDF
                        </button>
                        <p style="margin-top: 8px; font-size: 14px; color: #666;">
                            Formatted report for printing
                        </p>
                    </div>
                </div>
                
                <div style="margin-top: 32px; padding: 20px; background: #f8fafc; border-radius: 8px;">
                    <h4 style="margin-bottom: 12px;">Advanced Export Options</h4>
                    <form id="advancedExportForm">
                        <div class="form-group">
                            <label class="form-label">Date Range</label>
                            <div style="display: flex; gap: 12px;">
                                <input type="date" class="form-input" name="startDate">
                                <input type="date" class="form-input" name="endDate">
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">Include Data</label>
                            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 8px;">
                                <label><input type="checkbox" checked> Subjects</label>
                                <label><input type="checkbox" checked> Chapters & Topics</label>
                                <label><input type="checkbox" checked> KPIs</label>
                                <label><input type="checkbox" checked> Progress History</label>
                                <label><input type="checkbox" checked> Tasks</label>
                                <label><input type="checkbox" checked> Analytics</label>
                            </div>
                        </div>
                        
                        <button type="submit" class="btn btn-primary">Export with Filters</button>
                    </form>
                </div>
            </div>
        </div>
    `;
}

// Save class
async function saveClass() {
    try {
        const form = document.getElementById('classForm');
        const formData = new FormData(form);
        
        const classData = {
            name: formData.get('name'),
            description: formData.get('description')
        };
        
        if (!classData.name) {
            showAlert('Please enter a class name', 'warning');
            return;
        }
        
        const response = await fetch(`${API_BASE}/classes`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(classData)
        });
        
        if (!response.ok) throw new Error('Failed to save class');
        
        await loadClasses();
        closeModal('addClassModal');
        showAlert('Class created successfully!', 'success');
        
        // Refresh current page if on classes page
        if (state.currentPage === 'classes') {
            await loadClassesPage();
        }
    } catch (error) {
        console.error('Error saving class:', error);
        showAlert('Failed to save class', 'danger');
    }
}

// Save chapter
async function saveChapter() {
    try {
        const form = document.getElementById('chapterForm');
        const formData = new FormData(form);
        
        const chapterData = {
            subject: document.getElementById('chapterSubjectId').value,
            title: formData.get('title'),
            number: parseInt(formData.get('number')),
            deadline: formData.get('deadline'),
            description: formData.get('description')
        };
        
        if (!chapterData.title || !chapterData.number || !chapterData.deadline) {
            showAlert('Please fill in all required fields', 'warning');
            return;
        }
        
        const response = await fetch(`${API_BASE}/syllabus/chapters`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(chapterData)
        });
        
        if (!response.ok) throw new Error('Failed to save chapter');
        
        await loadSubjects();
        closeModal('addChapterModal');
        showAlert('Chapter created successfully!', 'success');
        
        // Refresh current page
        loadPageContent(state.currentPage);
    } catch (error) {
        console.error('Error saving chapter:', error);
        showAlert('Failed to save chapter', 'danger');
    }
}

// Save topic
async function saveTopic() {
    try {
        const form = document.getElementById('topicForm');
        const formData = new FormData(form);
        
        const topicData = {
            chapter: document.getElementById('topicChapterId').value,
            title: formData.get('title'),
            deadline: formData.get('deadline'),
            notes: formData.get('notes')
        };
        
        if (!topicData.title || !topicData.deadline) {
            showAlert('Please fill in all required fields', 'warning');
            return;
        }
        
        const response = await fetch(`${API_BASE}/syllabus/topics`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(topicData)
        });
        
        if (!response.ok) throw new Error('Failed to save topic');
        
        await loadSubjects();
        closeModal('addTopicModal');
        showAlert('Topic created successfully!', 'success');
        
        // Refresh current page
        loadPageContent(state.currentPage);
    } catch (error) {
        console.error('Error saving topic:', error);
        showAlert('Failed to save topic', 'danger');
    }
}

// Update subject
async function updateSubject() {
    try {
        const form = document.getElementById('editSubjectForm');
        const formData = new FormData(form);
        const subjectId = document.getElementById('editSubjectId').value;
        
        const subjectData = {
            name: formData.get('name'),
            code: formData.get('code'),
            department: formData.get('department'),
            class: formData.get('class'),
            deadline: formData.get('deadline'),
            description: formData.get('description')
        };
        
        if (!subjectData.name || !subjectData.code || !subjectData.class) {
            showAlert('Please fill in all required fields', 'warning');
            return;
        }
        
        const response = await fetch(`${API_BASE}/syllabus/subjects/${subjectId}`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(subjectData)
        });
        
        if (!response.ok) throw new Error('Failed to update subject');
        
        await loadSubjects();
        closeModal('editSubjectModal');
        showAlert('Subject updated successfully!', 'success');
        
        // Refresh current page
        loadPageContent(state.currentPage);
    } catch (error) {
        console.error('Error updating subject:', error);
        showAlert('Failed to update subject', 'danger');
    }
}

// Open chapter modal
function openAddChapterModal(subjectId) {
    document.getElementById('chapterSubjectId').value = subjectId;
    openModal('addChapterModal');
}

// Open topic modal
function openAddTopicModal(chapterId) {
    document.getElementById('topicChapterId').value = chapterId;
    openModal('addTopicModal');
}

// Edit subject
function editSubject(subjectId) {
    const subject = state.subjects.find(s => s._id === subjectId);
    if (!subject) return;
    
    document.getElementById('editSubjectId').value = subject._id;
    document.getElementById('editSubjectName').value = subject.name;
    document.getElementById('editSubjectCode').value = subject.code;
    document.getElementById('editSubjectDepartment').value = subject.department;
    
    // Populate classes dropdown
    const classSelect = document.getElementById('editSubjectClass');
    classSelect.innerHTML = '<option value="">Select Class</option>';
    state.classes.forEach(cls => {
        const option = document.createElement('option');
        option.value = cls._id;
        option.textContent = cls.name;
        if (subject.class && subject.class._id === cls._id) {
            option.selected = true;
        }
        classSelect.appendChild(option);
    });
    
    document.getElementById('editSubjectDeadline').value = subject.deadline ? subject.deadline.split('T')[0] : '';
    document.getElementById('editSubjectDescription').value = subject.description || '';
    
    openModal('editSubjectModal');
}

// Delete functions
async function deleteSubject(subjectId) {
    if (!confirm('Are you sure you want to delete this subject and all its chapters/topics?')) return;
    
    try {
        const response = await fetch(`${API_BASE}/syllabus/subjects/${subjectId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('Failed to delete subject');
        
        await loadSubjects();
        showAlert('Subject deleted successfully!', 'success');
        loadPageContent(state.currentPage);
    } catch (error) {
        console.error('Error deleting subject:', error);
        showAlert('Failed to delete subject', 'danger');
    }
}

async function deleteChapter(chapterId) {
    if (!confirm('Are you sure you want to delete this chapter and all its topics?')) return;
    
    try {
        const response = await fetch(`${API_BASE}/syllabus/chapters/${chapterId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('Failed to delete chapter');
        
        await loadSubjects();
        showAlert('Chapter deleted successfully!', 'success');
        loadPageContent(state.currentPage);
    } catch (error) {
        console.error('Error deleting chapter:', error);
        showAlert('Failed to delete chapter', 'danger');
    }
}

async function deleteTopic(topicId) {
    if (!confirm('Are you sure you want to delete this topic?')) return;
    
    try {
        const response = await fetch(`${API_BASE}/syllabus/topics/${topicId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('Failed to delete topic');
        
        await loadSubjects();
        showAlert('Topic deleted successfully!', 'success');
        loadPageContent(state.currentPage);
    } catch (error) {
        console.error('Error deleting topic:', error);
        showAlert('Failed to delete topic', 'danger');
    }
}

// Load subjects page with full management
async function loadSubjectsPageComplete() {
    const container = document.getElementById('subject-kpi-list');
    if (!container) return;
    
    container.innerHTML = '';
    
    for (const subject of state.subjects) {
        const subjectKPIs = state.kpis.filter(k => k.subject === subject._id);
        const achievedCount = subjectKPIs.filter(k => k.achieved).length;
        const kpiStatus = achievedCount === subjectKPIs.length ? 'achieved' : 
                         achievedCount > 0 ? 'pending' : 'failed';
        
        // Calculate subject progress
        let totalTopics = 0;
        let completedTopics = 0;
        
        if (subject.chapters) {
            subject.chapters.forEach(chapter => {
                if (chapter.topics) {
                    totalTopics += chapter.topics.length;
                    completedTopics += chapter.topics.filter(t => t.completed).length;
                }
            });
        }
        
        const progress = totalTopics > 0 ? (completedTopics / totalTopics) * 100 : 0;
        
        const subjectCard = document.createElement('div');
        subjectCard.className = 'card';
        subjectCard.style.marginBottom = '24px';
        
        subjectCard.innerHTML = `
            <div class="card-header">
                <div>
                    <h3 class="card-title">${subject.name} - ${subject.class?.name || 'No Class'}</h3>
                    <div style="color: var(--gray-600); font-size: 14px; margin-top: 4px;">
                        Code: ${subject.code} | Department: ${subject.department} | Deadline: ${new Date(subject.deadline).toLocaleDateString()}
                    </div>
                </div>
                <div style="display: flex; gap: 8px;">
                    <button class="btn btn-secondary btn-sm" onclick="editSubject('${subject._id}')">Edit</button>
                    <button class="btn btn-danger btn-sm" onclick="deleteSubject('${subject._id}')">Delete</button>
                </div>
            </div>
            
            <div style="padding: 20px;">
                <!-- KPIs Section -->
                <div style="margin-bottom: 24px;">
                    <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 16px;">
                        <h4 style="font-size: 16px; font-weight: 600;">Key Performance Indicators</h4>
                        <div class="kpi-status ${kpiStatus}" style="margin-left: auto;">${kpiStatus === 'achieved' ? '✓' : kpiStatus === 'pending' ? '⏱' : '✗'}</div>
                    </div>
                    
                    <div class="progress-container">
                        <div class="progress-header">
                            <span class="progress-label">Overall Progress</span>
                            <span class="progress-value">${Math.round(progress)}%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${progress}%"></div>
                        </div>
                    </div>
                    
                    <div class="kpi-items" style="margin-top: 16px;">
                        ${subjectKPIs.map(kpi => `
                            <div class="kpi-item">
                                <input type="checkbox" class="kpi-checkbox" 
                                       ${kpi.achieved ? 'checked' : ''} 
                                       onchange="updateKPI('${kpi._id}', this.checked)">
                                <span class="kpi-label">${kpi.title}</span>
                            </div>
                        `).join('')}
                    </div>
                    
                    <button class="btn btn-secondary btn-sm" style="margin-top: 12px;" onclick="openAddKPIModal('${subject._id}')">
                        + Add KPI
                    </button>
                </div>
                
                <!-- Chapters Section -->
                <div>
                    <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 16px;">
                        <h4 style="font-size: 16px; font-weight: 600;">Chapters (${subject.chapters?.length || 0})</h4>
                        <button class="btn btn-primary btn-sm" onclick="openAddChapterModal('${subject._id}')">
                            + Add Chapter
                        </button>
                    </div>
                    
                    <div class="chapters-list">
                        ${renderChaptersForManagement(subject.chapters || [])}
                    </div>
                </div>
            </div>
        `;
        
        container.appendChild(subjectCard);
    }
}

function renderChaptersForManagement(chapters) {
    if (chapters.length === 0) {
        return '<p style="color: var(--gray-500); text-align: center; padding: 20px;">No chapters added yet</p>';
    }
    
    return chapters.sort((a, b) => a.number - b.number).map(chapter => {
        const allCompleted = chapter.topics?.length > 0 && chapter.topics.every(t => t.completed);
        
        return `
            <div style="border: 1px solid var(--gray-200); border-radius: 8px; padding: 16px; margin-bottom: 12px; ${allCompleted ? 'background: var(--gray-50);' : ''}">
                <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 12px;">
                    <div>
                        <h5 style="font-weight: 600; margin: 0;">Chapter ${chapter.number}: ${chapter.title}</h5>
                        <div style="font-size: 13px; color: var(--gray-600); margin-top: 4px;">
                            Deadline: ${new Date(chapter.deadline).toLocaleDateString()} | 
                            Topics: ${chapter.topics?.length || 0} | 
                            Status: ${chapter.status}
                        </div>
                    </div>
                    <div style="display: flex; gap: 8px;">
                        <button class="btn-icon" onclick="editChapter('${chapter._id}')">✏️</button>
                        <button class="btn-icon" onclick="deleteChapter('${chapter._id}')">🗑️</button>
                    </div>
                </div>
                
                <div style="margin-left: 20px;">
                    ${renderTopicsForManagement(chapter.topics || [])}
                    <button class="btn btn-secondary btn-sm" style="margin-top: 8px;" onclick="openAddTopicModal('${chapter._id}')">
                        + Add Topic
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

function renderTopicsForManagement(topics) {
    if (topics.length === 0) {
        return '<p style="color: var(--gray-500); font-size: 14px;">No topics added yet</p>';
    }
    
    return topics.map(topic => {
        const isOverdue = !topic.completed && new Date(topic.deadline) < new Date();
        
        return `
            <div style="display: flex; align-items: center; gap: 12px; padding: 8px; border-radius: 6px; margin-bottom: 8px; background: ${topic.completed ? 'var(--gray-50)' : 'white'};">
                <input type="checkbox" ${topic.completed ? 'checked' : ''} 
                       onchange="toggleTopicCompletion('${topic._id}')">
                <div style="flex: 1;">
                    <span style="${topic.completed ? 'text-decoration: line-through; color: var(--gray-500);' : ''} ${isOverdue ? 'color: var(--danger);' : ''}">
                        ${topic.title}
                    </span>
                    <div style="font-size: 12px; color: var(--gray-600);">
                        Due: ${new Date(topic.deadline).toLocaleDateString()} ${isOverdue ? '(Overdue!)' : ''}
                    </div>
                </div>
                <div style="display: flex; gap: 4px;">
                    <button class="btn-icon" onclick="editTopic('${topic._id}')">✏️</button>
                    <button class="btn-icon" onclick="deleteTopic('${topic._id}')">🗑️</button>
                </div>
            </div>
        `;
    }).join('');
}

async function toggleTopicCompletion(topicId) {
    try {
        const response = await fetch(`${API_BASE}/syllabus/topics/${topicId}/toggle`, {
            method: 'PATCH'
        });
        
        if (!response.ok) throw new Error('Failed to update topic');
        
        await loadSubjects();
        loadPageContent(state.currentPage);
        showAlert('Topic status updated!', 'success');
    } catch (error) {
        console.error('Error updating topic:', error);
        showAlert('Failed to update topic status', 'danger');
    }
}

// Classes Management
async function loadClassesPage() {
    const container = document.getElementById('classes-list');
    if (!container) return;
    
    if (state.classes.length === 0) {
        container.innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 60px 20px;">
                <h3 style="color: var(--gray-500);">No classes found</h3>
                <p style="color: var(--gray-400); margin-top: 8px;">Create your first class to get started</p>
                <button class="btn btn-primary" style="margin-top: 16px;" onclick="openModal('addClassModal')">
                    + Add First Class
                </button>
            </div>
        `;
        return;
    }
    
    container.innerHTML = state.classes.map(cls => {
        const subjectsInClass = state.subjects.filter(s => s.class && s.class._id === cls._id);
        
        return `
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">${cls.name}</h3>
                    <div style="display: flex; gap: 8px;">
                        <button class="btn btn-secondary btn-sm" onclick="editClass('${cls._id}')">Edit</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteClass('${cls._id}')">Delete</button>
                    </div>
                </div>
                <div style="padding: 20px;">
                    <p style="color: var(--gray-600); margin-bottom: 16px;">
                        ${cls.description || 'No description provided'}
                    </p>
                    <div style="border-top: 1px solid var(--gray-200); padding-top: 16px;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <span style="font-weight: 600;">Subjects</span>
                            <span style="color: var(--primary); font-weight: 600;">${subjectsInClass.length}</span>
                        </div>
                        ${subjectsInClass.length > 0 ? `
                            <div style="margin-top: 12px;">
                                ${subjectsInClass.map(s => `
                                    <div style="padding: 8px; background: var(--gray-50); border-radius: 6px; margin-bottom: 8px;">
                                        ${s.name} (${s.code})
                                    </div>
                                `).join('')}
                            </div>
                        ` : '<p style="color: var(--gray-500); margin-top: 8px; font-size: 14px;">No subjects assigned yet</p>'}
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

function filterClasses(searchTerm) {
    const cards = document.querySelectorAll('#classes-list .card');
    const term = searchTerm.toLowerCase();
    
    cards.forEach(card => {
        const className = card.querySelector('.card-title').textContent.toLowerCase();
        const description = card.querySelector('p').textContent.toLowerCase();
        
        if (className.includes(term) || description.includes(term)) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}

async function editClass(classId) {
    const cls = state.classes.find(c => c._id === classId);
    if (!cls) return;
    
    // Populate form
    const form = document.getElementById('classForm');
    form.elements.name.value = cls.name;
    form.elements.description.value = cls.description || '';
    
    // Store the ID for update
    form.dataset.editId = classId;
    
    // Change modal title
    document.querySelector('#addClassModal .modal-title').textContent = 'Edit Class';
    
    openModal('addClassModal');
}

async function deleteClass(classId) {
    const cls = state.classes.find(c => c._id === classId);
    const subjectsInClass = state.subjects.filter(s => s.class && s.class._id === classId);
    
    if (subjectsInClass.length > 0) {
        showAlert(`Cannot delete "${cls.name}" - it has ${subjectsInClass.length} subjects assigned`, 'warning');
        return;
    }
    
    if (!confirm(`Are you sure you want to delete "${cls.name}"?`)) return;
    
    try {
        const response = await fetch(`${API_BASE}/classes/${classId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('Failed to delete class');
        
        await loadClasses();
        await loadClassesPage();
        showAlert('Class deleted successfully!', 'success');
    } catch (error) {
        console.error('Error deleting class:', error);
        showAlert('Failed to delete class', 'danger');
    }
}

// Update the saveClass function to handle both create and edit
window.saveClass = async function() {
    try {
        const form = document.getElementById('classForm');
        const formData = new FormData(form);
        
        const classData = {
            name: formData.get('name'),
            description: formData.get('description')
        };
        
        if (!classData.name) {
            showAlert('Please enter a class name', 'warning');
            return;
        }
        
        const editId = form.dataset.editId;
        const isEdit = !!editId;
        
        const response = await fetch(`${API_BASE}/classes${isEdit ? '/' + editId : ''}`, {
            method: isEdit ? 'PATCH' : 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(classData)
        });
        
        if (!response.ok) throw new Error(`Failed to ${isEdit ? 'update' : 'save'} class`);
        
        // Clear edit ID
        delete form.dataset.editId;
        
        // Reset modal title
        document.querySelector('#addClassModal .modal-title').textContent = 'Add New Class';
        
        await loadClasses();
        closeModal('addClassModal');
        showAlert(`Class ${isEdit ? 'updated' : 'created'} successfully!`, 'success');
        
        // Refresh current page if on classes page
        if (state.currentPage === 'classes') {
            await loadClassesPage();
        }
    } catch (error) {
        console.error('Error saving class:', error);
        showAlert('Failed to save class', 'danger');
    }
};
window.toggleSidebar = toggleSidebar;
window.openModal = openModal;
window.closeModal = closeModal;
window.addKPIField = addKPIField;
window.updateKPI = updateKPI;
window.toggleTask = toggleTask;
window.generateDailyTasks = generateDailyTasks;
window.exportData = exportData;
window.editTask = (taskId) => console.log('Edit task:', taskId);
window.viewSubjectDetails = (subjectId) => console.log('View subject details:', subjectId);
window.configureWidget = (btn) => console.log('Configure widget');
window.saveClass = saveClass;
window.saveChapter = saveChapter;
window.saveTopic = saveTopic;
window.updateSubject = updateSubject;
window.openAddChapterModal = openAddChapterModal;
window.openAddTopicModal = openAddTopicModal;
window.editSubject = editSubject;
window.deleteSubject = deleteSubject;
window.deleteChapter = deleteChapter;
window.deleteTopic = deleteTopic;
window.toggleTopicCompletion = toggleTopicCompletion;
// Initialize and export functions
window.showPage = showPage;
window.toggleSidebar = toggleSidebar;
window.openModal = openModal;
window.closeModal = closeModal;
window.addKPIField = addKPIField;
window.updateKPI = updateKPI;
window.toggleTask = toggleTask;
window.generateDailyTasks = generateDailyTasks;
window.exportData = exportData;
window.editTask = (taskId) => console.log('Edit task:', taskId);
window.viewSubjectDetails = (subjectId) => console.log('View subject details:', subjectId);
window.configureWidget = (btn) => console.log('Configure widget');
window.saveChapter = saveChapter;
window.saveTopic = saveTopic;
window.updateSubject = updateSubject;
window.openAddChapterModal = openAddChapterModal;
window.openAddTopicModal = openAddTopicModal;
window.editSubject = editSubject;
window.deleteSubject = deleteSubject;
window.deleteChapter = deleteChapter;
window.deleteTopic = deleteTopic;
window.toggleTopicCompletion = toggleTopicCompletion;
window.editClass = editClass;
window.deleteClass = deleteClass;
window.filterClasses = filterClasses;
window.editSubjectKPIs = (subjectId) => {
    // Redirect to KPI management for this subject
    console.log('Edit KPIs for subject:', subjectId);
};
window.showTab = (tabId) => {
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    document.getElementById(tabId).classList.add('active');
    
    document.querySelectorAll('.tab-item').forEach(item => {
        item.classList.remove('active');
    });
    event.currentTarget.classList.add('active');
};



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Syllabus Tracker Pro - Educational Management System</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;
            --primary-light: #818cf8;
            --secondary: #8b5cf6;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --info: #3b82f6;
            --dark: #1e293b;
            --gray-900: #0f172a;
            --gray-800: #1e293b;
            --gray-700: #334155;
            --gray-600: #475569;
            --gray-500: #64748b;
            --gray-400: #94a3b8;
            --gray-300: #cbd5e1;
            --gray-200: #e2e8f0;
            --gray-100: #f1f5f9;
            --gray-50: #f8fafc;
            --white: #ffffff;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            --border-radius: 8px;
            --border-radius-lg: 12px;
            --transition: all 0.2s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background-color: var(--gray-50);
            color: var(--gray-900);
            line-height: 1.6;
        }

        /* Layout */
        .app-container {
            display: flex;
            height: 100vh;
            overflow: hidden;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: var(--white);
            border-right: 1px solid var(--gray-200);
            display: flex;
            flex-direction: column;
            transition: var(--transition);
        }

        .sidebar-header {
            padding: 24px;
            border-bottom: 1px solid var(--gray-200);
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .logo-icon {
            width: 48px;
            height: 48px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: var(--border-radius-lg);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            font-weight: 700;
        }

        .logo-text {
            flex: 1;
        }

        .logo-title {
            font-size: 18px;
            font-weight: 700;
            color: var(--gray-900);
        }

        .logo-subtitle {
            font-size: 12px;
            color: var(--gray-500);
        }

        .sidebar-nav {
            flex: 1;
            padding: 16px;
            overflow-y: auto;
        }

        .nav-section {
            margin-bottom: 24px;
        }

        .nav-section-title {
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            color: var(--gray-500);
            margin-bottom: 8px;
            padding: 0 12px;
        }

        .nav-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px;
            border-radius: var(--border-radius);
            color: var(--gray-700);
            text-decoration: none;
            font-size: 14px;
            font-weight: 500;
            transition: var(--transition);
            cursor: pointer;
            margin-bottom: 4px;
        }

        .nav-item:hover {
            background: var(--gray-100);
            color: var(--primary);
        }

        .nav-item.active {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            box-shadow: var(--shadow-md);
        }

        .nav-item-icon {
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .nav-item-badge {
            margin-left: auto;
            font-size: 11px;
            padding: 2px 8px;
            background: var(--danger);
            color: white;
            border-radius: 999px;
            font-weight: 600;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        /* Header */
        .header {
            background: var(--white);
            border-bottom: 1px solid var(--gray-200);
            padding: 16px 32px;
            display: flex;
            align-items: center;
            gap: 32px;
            box-shadow: var(--shadow-sm);
        }

        .header-title {
            font-size: 24px;
            font-weight: 700;
            color: var(--gray-900);
        }

        .header-actions {
            margin-left: auto;
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .search-box {
            position: relative;
            width: 300px;
        }

        .search-input {
            width: 100%;
            padding: 10px 16px 10px 40px;
            border: 1px solid var(--gray-300);
            border-radius: var(--border-radius);
            font-size: 14px;
            transition: var(--transition);
        }

        .search-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        .search-icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray-500);
        }

        /* Page Content */
        .page-content {
            flex: 1;
            padding: 32px;
            overflow-y: auto;
            background: var(--gray-50);
        }

        /* Cards */
        .card {
            background: var(--white);
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow);
            padding: 24px;
            margin-bottom: 24px;
            transition: var(--transition);
        }

        .card:hover {
            box-shadow: var(--shadow-md);
        }

        .card-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .card-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--gray-900);
        }

        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 10px 20px;
            border: none;
            border-radius: var(--border-radius);
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            box-shadow: var(--shadow);
        }

        .btn-primary:hover {
            box-shadow: var(--shadow-md);
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: var(--gray-100);
            color: var(--gray-700);
            border: 1px solid var(--gray-300);
        }

        .btn-secondary:hover {
            background: var(--gray-200);
        }

        .btn-sm {
            padding: 6px 12px;
            font-size: 13px;
        }

        .btn-danger {
            background: var(--danger);
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
            transform: translateY(-1px);
        }

        .btn-icon {
            padding: 8px;
            border-radius: var(--border-radius);
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 24px;
            margin-bottom: 32px;
        }

        .stat-card {
            background: var(--white);
            border-radius: var(--border-radius-lg);
            padding: 24px;
            box-shadow: var(--shadow);
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(180deg, var(--primary), var(--secondary));
        }

        .stat-label {
            font-size: 13px;
            font-weight: 500;
            color: var(--gray-600);
            text-transform: uppercase;
            letter-spacing: 0.05em;
            margin-bottom: 8px;
        }

        .stat-value {
            font-size: 32px;
            font-weight: 700;
            color: var(--gray-900);
            margin-bottom: 8px;
        }

        .stat-change {
            font-size: 13px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .stat-change.positive {
            color: var(--success);
        }

        .stat-change.negative {
            color: var(--danger);
        }

        /* Progress Bar */
        .progress-container {
            margin: 16px 0;
        }

        .progress-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .progress-label {
            font-size: 14px;
            font-weight: 500;
            color: var(--gray-700);
        }

        .progress-value {
            font-size: 14px;
            font-weight: 600;
            color: var(--primary);
        }

        .progress-bar {
            height: 8px;
            background: var(--gray-200);
            border-radius: 999px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            border-radius: 999px;
            transition: width 0.3s ease;
        }

        /* Tab Navigation */
        .tab-nav {
            display: flex;
            gap: 8px;
            border-bottom: 2px solid var(--gray-200);
            margin-bottom: 24px;
        }

        .tab-item {
            padding: 12px 24px;
            font-size: 14px;
            font-weight: 500;
            color: var(--gray-600);
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: var(--transition);
            position: relative;
            top: 2px;
        }

        .tab-item:hover {
            color: var(--primary);
        }

        .tab-item.active {
            color: var(--primary);
            border-bottom-color: var(--primary);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Forms */
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            font-size: 14px;
            font-weight: 500;
            color: var(--gray-700);
            margin-bottom: 8px;
        }

        .form-input,
        .form-select,
        .form-textarea {
            width: 100%;
            padding: 10px 16px;
            border: 1px solid var(--gray-300);
            border-radius: var(--border-radius);
            font-size: 14px;
            transition: var(--transition);
        }

        .form-input:focus,
        .form-select:focus,
        .form-textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        /* Charts Container */
        .chart-container {
            position: relative;
            height: 300px;
            margin: 20px 0;
        }

        /* KPI Section */
        .kpi-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .kpi-card {
            background: var(--white);
            border: 1px solid var(--gray-200);
            border-radius: var(--border-radius-lg);
            padding: 20px;
            transition: var(--transition);
        }

        .kpi-card:hover {
            box-shadow: var(--shadow-md);
            border-color: var(--primary-light);
        }

        .kpi-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
        }

        .kpi-title {
            font-size: 16px;
            font-weight: 600;
            color: var(--gray-800);
        }

        .kpi-status {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            color: white;
        }

        .kpi-status.achieved {
            background: var(--success);
        }

        .kpi-status.pending {
            background: var(--warning);
        }

        .kpi-status.failed {
            background: var(--danger);
        }

        .kpi-items {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .kpi-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px;
            border-radius: var(--border-radius);
            background: var(--gray-50);
        }

        .kpi-checkbox {
            width: 20px;
            height: 20px;
            cursor: pointer;
        }

        .kpi-label {
            font-size: 14px;
            color: var(--gray-700);
            flex: 1;
        }

        /* Report Builder */
        .report-builder {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 24px;
            height: calc(100vh - 200px);
        }

        .report-sidebar {
            background: var(--gray-50);
            border-radius: var(--border-radius-lg);
            padding: 20px;
            overflow-y: auto;
        }

        .report-canvas {
            background: var(--white);
            border-radius: var(--border-radius-lg);
            padding: 20px;
            overflow-y: auto;
            box-shadow: var(--shadow);
        }

        .widget-item {
            background: var(--white);
            border: 1px solid var(--gray-200);
            border-radius: var(--border-radius);
            padding: 12px;
            margin-bottom: 12px;
            cursor: move;
            transition: var(--transition);
        }

        .widget-item:hover {
            box-shadow: var(--shadow-md);
            transform: translateY(-2px);
        }

        .widget-item.dragging {
            opacity: 0.5;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: var(--white);
            border-radius: var(--border-radius-lg);
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: var(--shadow-xl);
        }

        .modal-header {
            padding: 24px;
            border-bottom: 1px solid var(--gray-200);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .modal-title {
            font-size: 20px;
            font-weight: 600;
            color: var(--gray-900);
        }

        .modal-close {
            width: 32px;
            height: 32px;
            border: none;
            background: var(--gray-100);
            border-radius: var(--border-radius);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: var(--transition);
        }

        .modal-close:hover {
            background: var(--gray-200);
        }

        .modal-body {
            padding: 24px;
        }

        .modal-footer {
            padding: 24px;
            border-top: 1px solid var(--gray-200);
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        /* Responsive */
        @media (max-width: 1024px) {
            .sidebar {
                width: 0;
                position: absolute;
                left: -280px;
                height: 100vh;
                z-index: 100;
            }

            .sidebar.open {
                left: 0;
                width: 280px;
                box-shadow: var(--shadow-xl);
            }

            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .header {
                padding: 16px;
            }

            .page-content {
                padding: 16px;
            }

            .search-box {
                width: 200px;
            }

            .report-builder {
                grid-template-columns: 1fr;
            }

            .report-sidebar {
                display: none;
            }
        }

        /* Loading Spinner */
        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid var(--gray-200);
            border-top-color: var(--primary);
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Alerts */
        .alert {
            padding: 16px 20px;
            border-radius: var(--border-radius);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 14px;
            font-weight: 500;
        }

        .alert-success {
            background: var(--success);
            color: white;
        }

        .alert-warning {
            background: var(--warning);
            color: white;
        }

        .alert-danger {
            background: var(--danger);
            color: white;
        }

        .alert-info {
            background: var(--info);
            color: white;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <div class="logo">
                    <div class="logo-icon">ST</div>
                    <div class="logo-text">
                        <div class="logo-title">Syllabus Tracker Pro</div>
                        <div class="logo-subtitle">Educational Management</div>
                    </div>
                </div>

                <!-- Progress Tracking Page -->
                <div id="progress-page" class="page" style="display: none;">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Progress Tracking Dashboard</h3>
                            <select class="form-select" style="width: 200px;" onchange="filterProgressByDepartment(this.value)">
                                <option value="">All Departments</option>
                                <option value="Mathematics">Mathematics</option>
                                <option value="Science">Science</option>
                                <option value="English">English</option>
                                <option value="Social Studies">Social Studies</option>
                                <option value="Arts">Arts</option>
                            </select>
                        </div>
                        
                        <div id="progress-tracking-content">
                            <!-- Progress tracking will be loaded here -->
                        </div>
                    </div>
                </div>

                <!-- Milestones Page -->
                <div id="milestones-page" class="page" style="display: none;">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Milestones & Achievements</h3>
                            <button class="btn btn-primary" onclick="openModal('addMilestoneModal')">
                                + Add Milestone
                            </button>
                        </div>
                        
                        <div class="tab-nav">
                            <div class="tab-item active" onclick="showMilestoneTab('available')">Available Milestones</div>
                            <div class="tab-item" onclick="showMilestoneTab('achieved')">My Achievements</div>
                            <div class="tab-item" onclick="showMilestoneTab('leaderboard')">Leaderboard</div>
                        </div>
                        
                        <div class="tab-content active" id="available-milestones">
                            <div class="grid-container" id="milestones-list">
                                <!-- Available milestones will be loaded here -->
                            </div>
                        </div>
                        
                        <div class="tab-content" id="achieved-milestones" style="display: none;">
                            <div class="grid-container" id="achievements-list">
                                <!-- User achievements will be loaded here -->
                            </div>
                        </div>
                        
                        <div class="tab-content" id="milestone-leaderboard" style="display: none;">
                            <div id="leaderboard-content">
                                <!-- Leaderboard will be loaded here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <nav class="sidebar-nav">
                <div class="nav-section">
                    <div class="nav-section-title">Main Menu</div>
                    <a href="#" class="nav-item active" onclick="showPage('dashboard')">
                        <span class="nav-item-icon">📊</span>
                        <span>Dashboard</span>
                    </a>
                    <a href="#" class="nav-item" onclick="showPage('subjects')">
                        <span class="nav-item-icon">📚</span>
                        <span>Subjects & KPIs</span>
                    </a>
                    <a href="#" class="nav-item" onclick="showPage('analytics')">
                        <span class="nav-item-icon">📈</span>
                        <span>Analytics</span>
                    </a>
                    <a href="#" class="nav-item" onclick="showPage('tasks')">
                        <span class="nav-item-icon">📋</span>
                        <span>Daily Tasks</span>
                        <span class="nav-item-badge">5</span>
                    </a>
                </div>
                
                <div class="nav-section">
                    <div class="nav-section-title">Reports</div>
                    <a href="#" class="nav-item" onclick="showPage('report-builder')">
                        <span class="nav-item-icon">🛠️</span>
                        <span>Report Builder</span>
                    </a>
                    <a href="#" class="nav-item" onclick="showPage('scheduled-reports')">
                        <span class="nav-item-icon">⏰</span>
                        <span>Scheduled Reports</span>
                    </a>
                    <a href="#" class="nav-item" onclick="showPage('export')">
                        <span class="nav-item-icon">📤</span>
                        <span>Export Data</span>
                    </a>
                </div>
                
                <div class="nav-section">
                    <div class="nav-section-title">Management</div>
                    <a href="#" class="nav-item" onclick="showPage('classes')">
                        <span class="nav-item-icon">🏫</span>
                        <span>Classes</span>
                    </a>
                    <a href="#" class="nav-item" onclick="showPage('progress')">
                        <span class="nav-item-icon">🎯</span>
                        <span>Progress Tracking</span>
                    </a>
                    <a href="#" class="nav-item" onclick="showPage('milestones')">
                        <span class="nav-item-icon">🏆</span>
                        <span>Milestones</span>
                    </a>
                </div>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Header -->
            <header class="header">
                <button class="btn btn-icon" onclick="toggleSidebar()">☰</button>
                <h1 class="header-title" id="page-title">Dashboard</h1>
                
                <div class="header-actions">
                    <div class="search-box">
                        <span class="search-icon">🔍</span>
                        <input type="text" class="search-input" placeholder="Search...">
                    </div>
                    
                    <button class="btn btn-primary btn-sm" onclick="openModal('quickActionModal')">
                        + Quick Action
                    </button>
                    
                    <button class="btn btn-icon">🔔</button>
                    <button class="btn btn-icon">👤</button>
                </div>
            </header>

            <!-- Page Content -->
            <div class="page-content" id="page-content">
                <!-- Dashboard Page -->
                <div id="dashboard-page" class="page active">
                    <!-- Stats Grid -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-label">Total Subjects</div>
                            <div class="stat-value">24</div>
                            <div class="stat-change positive">
                                ↑ 12% from last month
                            </div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-label">Overall Progress</div>
                            <div class="stat-value">68%</div>
                            <div class="progress-container">
                                <div class="progress-bar">
                                    <div class="progress-fill" style="width: 68%"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-label">KPIs Achieved</div>
                            <div class="stat-value">156</div>
                            <div class="stat-change positive">
                                ↑ 8% this week
                            </div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-label">Active Tasks</div>
                            <div class="stat-value">42</div>
                            <div class="stat-change negative">
                                ↓ 3% from yesterday
                            </div>
                        </div>
                    </div>

                    <!-- Charts Section -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Progress Analytics</h3>
                            <select class="form-select" style="width: 150px;">
                                <option>Last 7 days</option>
                                <option>Last 30 days</option>
                                <option>Last 3 months</option>
                                <option>Last year</option>
                            </select>
                        </div>
                        <div class="tab-nav">
                            <div class="tab-item active" onclick="showTab('progress-chart')">Progress Trend</div>
                            <div class="tab-item" onclick="showTab('department-chart')">Department Comparison</div>
                            <div class="tab-item" onclick="showTab('forecast-chart')">Completion Forecast</div>
                        </div>
                        <div class="tab-content active" id="progress-chart">
                            <div class="chart-container">
                                <canvas id="progressChart"></canvas>
                            </div>
                        </div>
                        <div class="tab-content" id="department-chart">
                            <div class="chart-container">
                                <canvas id="departmentChart"></canvas>
                            </div>
                        </div>
                        <div class="tab-content" id="forecast-chart">
                            <div class="chart-container">
                                <canvas id="forecastChart"></canvas>
                            </div>
                        </div>
                    </div>

                    <!-- Recent Activity -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Recent Activity</h3>
                            <button class="btn btn-secondary btn-sm">View All</button>
                        </div>
                        <div class="activity-list">
                            <!-- Activity items would go here -->
                        </div>
                    </div>
                </div>

                <!-- Subjects & KPIs Page -->
                <div id="subjects-page" class="page" style="display: none;">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Subject Management & KPIs</h3>
                            <button class="btn btn-primary" onclick="openModal('addSubjectModal')">
                                + Add Subject
                            </button>
                        </div>
                        
                        <div class="kpi-grid" id="subject-kpi-list">
                            <!-- Subject KPI cards will be dynamically loaded here -->
                            <div class="kpi-card">
                                <div class="kpi-header">
                                    <h4 class="kpi-title">Mathematics - Grade 10</h4>
                                    <div class="kpi-status achieved">✓</div>
                                </div>
                                <div class="progress-container">
                                    <div class="progress-header">
                                        <span class="progress-label">Overall Progress</span>
                                        <span class="progress-value">85%</span>
                                    </div>
                                    <div class="progress-bar">
                                        <div class="progress-fill" style="width: 85%"></div>
                                    </div>
                                </div>
                                <div class="kpi-items">
                                    <div class="kpi-item">
                                        <input type="checkbox" class="kpi-checkbox" checked>
                                        <span class="kpi-label">Complete 90% of topics by semester end</span>
                                    </div>
                                    <div class="kpi-item">
                                        <input type="checkbox" class="kpi-checkbox" checked>
                                        <span class="kpi-label">Maintain average student score above 75%</span>
                                    </div>
                                    <div class="kpi-item">
                                        <input type="checkbox" class="kpi-checkbox">
                                        <span class="kpi-label">Submit all assignments on time</span>
                                    </div>
                                </div>
                                <div style="margin-top: 16px; display: flex; gap: 8px;">
                                    <button class="btn btn-secondary btn-sm">Edit KPIs</button>
                                    <button class="btn btn-secondary btn-sm">View Details</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Report Builder Page -->
                <div id="report-builder-page" class="page" style="display: none;">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Custom Report Builder</h3>
                            <div style="display: flex; gap: 12px;">
                                <button class="btn btn-secondary">Save Template</button>
                                <button class="btn btn-primary">Generate Report</button>
                            </div>
                        </div>
                        
                        <div class="report-builder">
                            <div class="report-sidebar">
                                <h4 style="margin-bottom: 16px;">Available Widgets</h4>
                                <div class="widget-item" draggable="true">
                                    📊 Progress Chart
                                </div>
                                <div class="widget-item" draggable="true">
                                    📈 Trend Analysis
                                </div>
                                <div class="widget-item" draggable="true">
                                    🎯 KPI Summary
                                </div>
                                <div class="widget-item" draggable="true">
                                    📋 Task Overview
                                </div>
                                <div class="widget-item" draggable="true">
                                    🏆 Milestone Tracker
                                </div>
                                <div class="widget-item" draggable="true">
                                    📊 Department Comparison
                                </div>
                                <div class="widget-item" draggable="true">
                                    📅 Timeline View
                                </div>
                                <div class="widget-item" draggable="true">
                                    📊 Custom Table
                                </div>
                            </div>
                            
                            <div class="report-canvas" id="report-canvas">
                                <div style="text-align: center; color: var(--gray-500); padding: 100px 20px;">
                                    <h3>Drag widgets here to build your report</h3>
                                    <p>Customize your report by dragging and dropping widgets from the sidebar</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Classes Page -->
                <div id="classes-page" class="page" style="display: none;">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Class Management</h3>
                            <button class="btn btn-primary" onclick="openModal('addClassModal')">
                                + Add Class
                            </button>
                        </div>
                        
                        <div style="margin-bottom: 20px;">
                            <input type="text" class="search-input" placeholder="Search classes..." onkeyup="filterClasses(this.value)">
                        </div>
                        
                        <div class="grid-container" id="classes-list">
                            <!-- Classes will be dynamically loaded here -->
                        </div>
                    </div>
                </div>

                <!-- Analytics Page -->
                <div id="analytics-page" class="page" style="display: none;">
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-label">Average Completion Rate</div>
                            <div class="stat-value">73.5%</div>
                            <div class="stat-change positive">↑ 5.2% this month</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">Predicted Completion Date</div>
                            <div class="stat-value">May 15</div>
                            <div class="stat-change">2 weeks ahead of schedule</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">Department Leader</div>
                            <div class="stat-value">Science</div>
                            <div class="stat-change positive">92% completion rate</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">At-Risk Subjects</div>
                            <div class="stat-value">3</div>
                            <div class="stat-change negative">Need immediate attention</div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Comparative Analysis</h3>
                            <select class="form-select" style="width: 200px;">
                                <option>Compare by Department</option>
                                <option>Compare by Class</option>
                                <option>Compare by Teacher</option>
                                <option>Compare by Subject</option>
                            </select>
                        </div>
                        <div class="chart-container">
                            <canvas id="comparativeChart"></canvas>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Trend Analysis & Forecasting</h3>
                            <button class="btn btn-secondary btn-sm">Export Analysis</button>
                        </div>
                        <div class="chart-container">
                            <canvas id="trendChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Modals -->
    <div class="modal" id="quickActionModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Quick Actions</h3>
                <button class="modal-close" onclick="closeModal('quickActionModal')">×</button>
            </div>
            <div class="modal-body">
                <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 16px;">
                    <button class="btn btn-secondary" style="padding: 20px;" onclick="closeModal('quickActionModal'); openModal('addSubjectModal')">
                        📚 Add Subject
                    </button>
                    <button class="btn btn-secondary" style="padding: 20px;" onclick="closeModal('quickActionModal'); openModal('addClassModal')">
                        🏫 Add Class
                    </button>
                    <button class="btn btn-secondary" style="padding: 20px;" onclick="closeModal('quickActionModal'); showPage('report-builder')">
                        📊 Generate Report
                    </button>
                    <button class="btn btn-secondary" style="padding: 20px;" onclick="closeModal('quickActionModal'); openModal('addTaskModal')">
                        📋 Create Task
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal" id="addSubjectModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Add New Subject</h3>
                <button class="modal-close" onclick="closeModal('addSubjectModal')">×</button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label class="form-label">Subject Name</label>
                        <input type="text" class="form-input" placeholder="e.g., Mathematics">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Subject Code</label>
                        <input type="text" class="form-input" placeholder="e.g., MATH101">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Department</label>
                        <select class="form-select">
                            <option>Select Department</option>
                            <option>Mathematics</option>
                            <option>Science</option>
                            <option>English</option>
                            <option>Social Studies</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Class *</label>
                        <select class="form-select" name="class" id="subjectClass" required>
                            <option value="">Select Class</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Completion Deadline *</label>
                        <input type="date" class="form-input" name="deadline" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea class="form-textarea" name="description" rows="3" placeholder="Brief description of the subject"></textarea>
                    </div>
                    <div class="form-group">
                        <label class="form-label">KPIs (Key Performance Indicators)</label>
                        <div id="kpi-list" style="margin-bottom: 12px;">
                            <div class="kpi-item">
                                <input type="text" class="form-input" placeholder="Enter KPI...">
                            </div>
                        </div>
                        <button type="button" class="btn btn-secondary btn-sm" onclick="addKPIField()">
                            + Add KPI
                        </button>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModal('addSubjectModal')">Cancel</button>
                <button class="btn btn-primary">Save Subject</button>
            </div>
        </div>
    </div>

    <!-- Add Class Modal -->
    <div class="modal" id="addClassModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Add New Class</h3>
                <button class="modal-close" onclick="closeModal('addClassModal')">×</button>
            </div>
            <div class="modal-body">
                <form id="classForm">
                    <div class="form-group">
                        <label class="form-label">Class Name *</label>
                        <input type="text" class="form-input" name="name" required placeholder="e.g., Grade 10-A">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea class="form-textarea" name="description" rows="3" placeholder="Optional description..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModal('addClassModal')">Cancel</button>
                <button class="btn btn-primary" onclick="saveClass()">Save Class</button>
            </div>
        </div>
    </div>

    <!-- Add Chapter Modal -->
    <div class="modal" id="addChapterModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Add New Chapter</h3>
                <button class="modal-close" onclick="closeModal('addChapterModal')">×</button>
            </div>
            <div class="modal-body">
                <form id="chapterForm">
                    <input type="hidden" id="chapterSubjectId">
                    <div class="form-group">
                        <label class="form-label">Chapter Title *</label>
                        <input type="text" class="form-input" name="title" required placeholder="e.g., Algebra Basics">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Chapter Number *</label>
                        <input type="number" class="form-input" name="number" required min="1" placeholder="e.g., 1">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Deadline *</label>
                        <input type="date" class="form-input" name="deadline" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea class="form-textarea" name="description" rows="3" placeholder="Chapter objectives and overview..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModal('addChapterModal')">Cancel</button>
                <button class="btn btn-primary" onclick="saveChapter()">Save Chapter</button>
            </div>
        </div>
    </div>

    <!-- Add Topic Modal -->
    <div class="modal" id="addTopicModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Add New Topic</h3>
                <button class="modal-close" onclick="closeModal('addTopicModal')">×</button>
            </div>
            <div class="modal-body">
                <form id="topicForm">
                    <input type="hidden" id="topicChapterId">
                    <div class="form-group">
                        <label class="form-label">Topic Title *</label>
                        <input type="text" class="form-input" name="title" required placeholder="e.g., Linear Equations">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Deadline *</label>
                        <input type="date" class="form-input" name="deadline" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Teaching Notes</label>
                        <textarea class="form-textarea" name="notes" rows="4" placeholder="Key concepts, teaching methods, resources..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModal('addTopicModal')">Cancel</button>
                <button class="btn btn-primary" onclick="saveTopic()">Save Topic</button>
            </div>
        </div>
    </div>

    <!-- Edit Subject Modal -->
    <div class="modal" id="editSubjectModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Edit Subject</h3>
                <button class="modal-close" onclick="closeModal('editSubjectModal')">×</button>
            </div>
            <div class="modal-body">
                <form id="editSubjectForm">
                    <input type="hidden" id="editSubjectId">
                    <div class="form-group">
                        <label class="form-label">Subject Name *</label>
                        <input type="text" class="form-input" name="name" id="editSubjectName" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Subject Code *</label>
                        <input type="text" class="form-input" name="code" id="editSubjectCode" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Department *</label>
                        <select class="form-select" name="department" id="editSubjectDepartment" required>
                            <option value="">Select Department</option>
                            <option value="Mathematics">Mathematics</option>
                            <option value="Science">Science</option>
                            <option value="English">English</option>
                            <option value="Social Studies">Social Studies</option>
                            <option value="Arts">Arts</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Class *</label>
                        <select class="form-select" name="class" id="editSubjectClass" required>
                            <option value="">Select Class</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Deadline *</label>
                        <input type="date" class="form-input" name="deadline" id="editSubjectDeadline" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea class="form-textarea" name="description" id="editSubjectDescription" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModal('editSubjectModal')">Cancel</button>
                <button class="btn btn-primary" onclick="updateSubject()">Update Subject</button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Navigation
        function showPage(pageId) {
            // Hide all pages
            document.querySelectorAll('.page').forEach(page => {
                page.style.display = 'none';
            });
            
            // Show selected page
            const page = document.getElementById(pageId + '-page');
            if (page) {
                page.style.display = 'block';
            }
            
            // Update nav items
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            event.currentTarget.classList.add('active');
            
            // Update page title
            const titles = {
                'dashboard': 'Dashboard',
                'subjects': 'Subjects & KPIs',
                'analytics': 'Analytics & Insights',
                'tasks': 'Daily Tasks',
                'report-builder': 'Custom Report Builder',
                'scheduled-reports': 'Scheduled Reports',
                'export': 'Export Data',
                'classes': 'Class Management',
                'progress': 'Progress Tracking',
                'milestones': 'Milestones & Rewards'
            };
            document.getElementById('page-title').textContent = titles[pageId] || 'Syllabus Tracker Pro';
            
            // Initialize charts if needed
            if (pageId === 'dashboard') {
                initializeDashboardCharts();
            } else if (pageId === 'analytics') {
                initializeAnalyticsCharts();
            }
        }

        // Toggle sidebar on mobile
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('open');
        }

        // Tab navigation
        function showTab(tabId) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.getElementById(tabId).classList.add('active');
            
            document.querySelectorAll('.tab-item').forEach(item => {
                item.classList.remove('active');
            });
            event.currentTarget.classList.add('active');
        }

        // Modal functions
        function openModal(modalId) {
            document.getElementById(modalId).classList.add('active');
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('active');
        }

        // Add KPI field
        function addKPIField() {
            const kpiList = document.getElementById('kpi-list');
            const newKPI = document.createElement('div');
            newKPI.className = 'kpi-item';
            newKPI.style.marginTop = '8px';
            newKPI.innerHTML = '<input type="text" class="form-input" placeholder="Enter KPI...">';
            kpiList.appendChild(newKPI);
        }

        // Initialize Dashboard Charts
        function initializeDashboardCharts() {
            // Progress Chart
            const progressCtx = document.getElementById('progressChart');
            if (progressCtx) {
                new Chart(progressCtx, {
                    type: 'line',
                    data: {
                        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                        datasets: [{
                            label: 'Overall Progress',
                            data: [65, 67, 68, 70, 69, 71, 73],
                            borderColor: '#6366f1',
                            backgroundColor: 'rgba(99, 102, 241, 0.1)',
                            tension: 0.3
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: 100
                            }
                        }
                    }
                });
            }

            // Department Chart
            const deptCtx = document.getElementById('departmentChart');
            if (deptCtx) {
                new Chart(deptCtx, {
                    type: 'bar',
                    data: {
                        labels: ['Mathematics', 'Science', 'English', 'Social Studies', 'Arts'],
                        datasets: [{
                            label: 'Progress %',
                            data: [85, 92, 78, 65, 88],
                            backgroundColor: [
                                '#6366f1',
                                '#8b5cf6',
                                '#10b981',
                                '#f59e0b',
                                '#ef4444'
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: 100
                            }
                        }
                    }
                });
            }
        }

        // Initialize Analytics Charts
        function initializeAnalyticsCharts() {
            // Comparative Chart
            const compCtx = document.getElementById('comparativeChart');
            if (compCtx) {
                new Chart(compCtx, {
                    type: 'radar',
                    data: {
                        labels: ['Completion Rate', 'On-Time Delivery', 'Student Performance', 'Resource Utilization', 'KPI Achievement'],
                        datasets: [{
                            label: 'Current Period',
                            data: [85, 78, 92, 70, 88],
                            borderColor: '#6366f1',
                            backgroundColor: 'rgba(99, 102, 241, 0.2)'
                        }, {
                            label: 'Previous Period',
                            data: [75, 82, 88, 65, 80],
                            borderColor: '#8b5cf6',
                            backgroundColor: 'rgba(139, 92, 246, 0.2)'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false
                    }
                });
            }

            // Trend Chart
            const trendCtx = document.getElementById('trendChart');
            if (trendCtx) {
                new Chart(trendCtx, {
                    type: 'line',
                    data: {
                        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                        datasets: [{
                            label: 'Actual Progress',
                            data: [20, 35, 45, 55, 62, 68, 73, null, null, null, null, null],
                            borderColor: '#6366f1',
                            backgroundColor: 'rgba(99, 102, 241, 0.1)'
                        }, {
                            label: 'Predicted Progress',
                            data: [20, 35, 45, 55, 62, 68, 73, 78, 83, 88, 92, 95],
                            borderColor: '#10b981',
                            borderDash: [5, 5],
                            backgroundColor: 'rgba(16, 185, 129, 0.1)'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'top'
                            }
                        }
                    }
                });
            }
        }

        // Drag and Drop for Report Builder
        document.addEventListener('DOMContentLoaded', function() {
            const widgets = document.querySelectorAll('.widget-item');
            const canvas = document.getElementById('report-canvas');
            
            widgets.forEach(widget => {
                widget.addEventListener('dragstart', function(e) {
                    e.dataTransfer.effectAllowed = 'copy';
                    e.dataTransfer.setData('text/plain', e.target.textContent);
                    e.target.classList.add('dragging');
                });
                
                widget.addEventListener('dragend', function(e) {
                    e.target.classList.remove('dragging');
                });
            });
            
            if (canvas) {
                canvas.addEventListener('dragover', function(e) {
                    e.preventDefault();
                    e.dataTransfer.dropEffect = 'copy';
                });
                
                canvas.addEventListener('drop', function(e) {
                    e.preventDefault();
                    const widgetText = e.dataTransfer.getData('text/plain');
                    
                    // Clear placeholder text if it exists
                    if (canvas.querySelector('div[style*="text-align: center"]')) {
                        canvas.innerHTML = '';
                    }
                    
                    // Add widget to canvas
                    const newWidget = document.createElement('div');
                    newWidget.className = 'card';
                    newWidget.innerHTML = `
                        <div class="card-header">
                            <h3 class="card-title">${widgetText}</h3>
                            <button class="btn btn-icon btn-sm" onclick="this.parentElement.parentElement.remove()">×</button>
                        </div>
                        <div style="height: 200px; display: flex; align-items: center; justify-content: center; color: var(--gray-500);">
                            Widget content will appear here
                        </div>
                    `;
                    canvas.appendChild(newWidget);
                });
            }
        });

        // Initialize charts on page load
        initializeDashboardCharts();
    </script>
</body>
</html>



// frontend/script.js - Professional Edition

// API Configuration
const API_BASE = '/api';

// State Management
const state = {
    subjects: [],
    classes: [],
    tasks: [],
    kpis: [],
    currentPage: 'dashboard',
    charts: {},
    progressHistory: [],
    milestones: []
};

// Initialize Application
document.addEventListener('DOMContentLoaded', async function() {
    await initializeApp();
    setupEventListeners();
    showPage('dashboard');
});

async function initializeApp() {
    try {
        // Show loading state
        showLoadingState();
        
        // Load all data
        await Promise.all([
            loadClasses(),
            loadSubjects(),
            loadKPIs(),
            loadTasks(),
            loadProgressHistory()
        ]);
        
        // Initialize components
        initializeSidebar();
        initializeSearch();
        initializeNotifications();
        
        hideLoadingState();
    } catch (error) {
        console.error('Failed to initialize app:', error);
        showAlert('Failed to load application data', 'danger');
    }
}

// Navigation Functions
function showPage(pageId) {
    // Update state
    state.currentPage = pageId;
    
    // Hide all pages
    document.querySelectorAll('.page').forEach(page => {
        page.style.display = 'none';
    });
    
    // Show selected page
    const page = document.getElementById(pageId + '-page');
    if (page) {
        page.style.display = 'block';
    }
    
    // Update nav items
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // Find and activate the clicked nav item
    const activeNav = document.querySelector(`.nav-item[onclick*="${pageId}"]`);
    if (activeNav) {
        activeNav.classList.add('active');
    }
    
    // Update page title
    const titles = {
        'dashboard': 'Dashboard',
        'subjects': 'Subjects & KPIs',
        'analytics': 'Analytics & Insights',
        'tasks': 'Daily Tasks',
        'report-builder': 'Custom Report Builder',
        'scheduled-reports': 'Scheduled Reports',
        'export': 'Export Data',
        'classes': 'Class Management',
        'progress': 'Progress Tracking',
        'milestones': 'Milestones & Rewards'
    };
    document.getElementById('page-title').textContent = titles[pageId] || 'Syllabus Tracker Pro';
    
    // Load page-specific content
    loadPageContent(pageId);
}

async function loadPageContent(pageId) {
    switch (pageId) {
        case 'dashboard':
            await loadDashboard();
            break;
        case 'subjects':
            await loadSubjectsPage();
            break;
        case 'analytics':
            await loadAnalyticsPage();
            break;
        case 'tasks':
            await loadTasksPage();
            break;
        case 'report-builder':
            initializeReportBuilder();
            break;
        case 'scheduled-reports':
            await loadScheduledReports();
            break;
        case 'export':
            await loadExportPage();
            break;
        case 'classes':
            await loadClassesPage();
            break;
        case 'progress':
            await loadProgressPage();
            break;
        case 'milestones':
            await loadMilestonesPage();
            break;
    }
}

// Data Loading Functions
async function loadClasses() {
    try {
        const response = await fetch(`${API_BASE}/classes`);
        if (!response.ok) throw new Error('Failed to load classes');
        state.classes = await response.json();
    } catch (error) {
        console.error('Error loading classes:', error);
        state.classes = [];
    }
}

async function loadSubjects() {
    try {
        const response = await fetch(`${API_BASE}/syllabus/subjects`);
        if (!response.ok) throw new Error('Failed to load subjects');
        state.subjects = await response.json();
    } catch (error) {
        console.error('Error loading subjects:', error);
        state.subjects = [];
    }
}

async function loadKPIs() {
    try {
        const response = await fetch(`${API_BASE}/kpis`);
        if (!response.ok) throw new Error('Failed to load KPIs');
        state.kpis = await response.json();
    } catch (error) {
        console.error('Error loading KPIs:', error);
        state.kpis = [];
    }
}

async function loadTasks() {
    try {
        const today = new Date().toISOString().split('T')[0];
        const response = await fetch(`${API_BASE}/tasks?date=${today}`);
        if (!response.ok) throw new Error('Failed to load tasks');
        state.tasks = await response.json();
        updateTaskBadge();
    } catch (error) {
        console.error('Error loading tasks:', error);
        state.tasks = [];
    }
}

async function loadProgressHistory() {
    try {
        const response = await fetch(`${API_BASE}/analytics/trends?period=30`);
        if (!response.ok) throw new Error('Failed to load progress history');
        state.progressHistory = await response.json();
    } catch (error) {
        console.error('Error loading progress history:', error);
        state.progressHistory = [];
    }
}

// Dashboard Functions
async function loadDashboard() {
    // Update stats
    updateDashboardStats();
    
    // Initialize charts
    initializeDashboardCharts();
    
    // Load recent activity
    await loadRecentActivity();
}

function updateDashboardStats() {
    // Calculate statistics
    const totalSubjects = state.subjects.length;
    let totalTopics = 0;
    let completedTopics = 0;
    let totalKPIs = state.kpis.length;
    let achievedKPIs = state.kpis.filter(k => k.achieved).length;
    
    state.subjects.forEach(subject => {
        if (subject.chapters) {
            subject.chapters.forEach(chapter => {
                if (chapter.topics) {
                    totalTopics += chapter.topics.length;
                    completedTopics += chapter.topics.filter(t => t.completed).length;
                }
            });
        }
    });
    
    const overallProgress = totalTopics > 0 ? (completedTopics / totalTopics) * 100 : 0;
    
    // Update UI
    updateStatCard('Total Subjects', totalSubjects, '+12% from last month', 'positive');
    updateStatCard('Overall Progress', `${Math.round(overallProgress)}%`, null, null, overallProgress);
    updateStatCard('KPIs Achieved', achievedKPIs, `↑ ${Math.round((achievedKPIs/totalKPIs)*100)}% achievement rate`, 'positive');
    updateStatCard('Active Tasks', state.tasks.filter(t => !t.completed).length, '↓ 3% from yesterday', 'negative');
}

function updateStatCard(label, value, change, changeType, progressValue) {
    const cards = document.querySelectorAll('.stat-card');
    const card = Array.from(cards).find(c => c.querySelector('.stat-label').textContent === label);
    
    if (card) {
        card.querySelector('.stat-value').textContent = value;
        
        if (change) {
            const changeEl = card.querySelector('.stat-change');
            if (changeEl) {
                changeEl.textContent = change;
                changeEl.className = `stat-change ${changeType}`;
            }
        }
        
        if (progressValue !== undefined) {
            const progressContainer = card.querySelector('.progress-container');
            if (progressContainer) {
                const progressFill = progressContainer.querySelector('.progress-fill');
                if (progressFill) {
                    progressFill.style.width = `${progressValue}%`;
                }
            }
        }
    }
}

// Chart Functions
function initializeDashboardCharts() {
    // Progress Trend Chart
    const progressCtx = document.getElementById('progressChart');
    if (progressCtx && progressCtx.getContext) {
        if (state.charts.progress) {
            state.charts.progress.destroy();
        }
        
        const dates = state.progressHistory.map(h => h._id.date);
        const progress = state.progressHistory.map(h => h.avgProgress);
        
        state.charts.progress = new Chart(progressCtx.getContext('2d'), {
            type: 'line',
            data: {
                labels: dates,
                datasets: [{
                    label: 'Average Progress',
                    data: progress,
                    borderColor: '#6366f1',
                    backgroundColor: 'rgba(99, 102, 241, 0.1)',
                    tension: 0.3,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: (context) => `Progress: ${context.parsed.y.toFixed(1)}%`
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        ticks: {
                            callback: (value) => value + '%'
                        }
                    }
                }
            }
        });
    }
    
    // Department Comparison Chart
    const deptCtx = document.getElementById('departmentChart');
    if (deptCtx && deptCtx.getContext) {
        if (state.charts.department) {
            state.charts.department.destroy();
        }
        
        const departments = ['Mathematics', 'Science', 'English', 'Social Studies', 'Arts'];
        const deptProgress = departments.map(dept => {
            const deptSubjects = state.subjects.filter(s => s.department === dept);
            if (deptSubjects.length === 0) return 0;
            
            let totalProgress = 0;
            deptSubjects.forEach(subject => {
                let subjectTopics = 0;
                let completedTopics = 0;
                
                if (subject.chapters) {
                    subject.chapters.forEach(chapter => {
                        if (chapter.topics) {
                            subjectTopics += chapter.topics.length;
                            completedTopics += chapter.topics.filter(t => t.completed).length;
                        }
                    });
                }
                
                totalProgress += subjectTopics > 0 ? (completedTopics / subjectTopics) * 100 : 0;
            });
            
            return totalProgress / deptSubjects.length;
        });
        
        state.charts.department = new Chart(deptCtx.getContext('2d'), {
            type: 'bar',
            data: {
                labels: departments,
                datasets: [{
                    label: 'Average Progress %',
                    data: deptProgress,
                    backgroundColor: [
                        'rgba(99, 102, 241, 0.8)',
                        'rgba(139, 92, 246, 0.8)',
                        'rgba(16, 185, 129, 0.8)',
                        'rgba(245, 158, 11, 0.8)',
                        'rgba(239, 68, 68, 0.8)'
                    ],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        ticks: {
                            callback: (value) => value + '%'
                        }
                    }
                }
            }
        });
    }
}

// Subject & KPI Management
async function loadSubjectsPage() {
    // Use the complete version with full management features
    await loadSubjectsPageComplete();
}

async function updateKPI(kpiId, achieved) {
    try {
        const response = await fetch(`${API_BASE}/kpis/${kpiId}`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ achieved })
        });
        
        if (!response.ok) throw new Error('Failed to update KPI');
        
        // Reload KPIs and refresh page
        await loadKPIs();
        if (state.currentPage === 'subjects') {
            await loadSubjectsPage();
        }
        
        showAlert('KPI updated successfully', 'success');
    } catch (error) {
        console.error('Error updating KPI:', error);
        showAlert('Failed to update KPI', 'danger');
        
        // Revert checkbox state
        const checkbox = document.querySelector(`input[onchange*="${kpiId}"]`);
        if (checkbox) {
            checkbox.checked = !achieved;
        }
    }
}

// Task Management
async function loadTasksPage() {
    const container = document.getElementById('task-list');
    if (!container) return;
    
    if (state.tasks.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">📋</div>
                <h3>No tasks for today</h3>
                <p>Generate tasks from your syllabus or create custom tasks</p>
                <button class="btn btn-primary" onclick="generateDailyTasks()">Generate Tasks</button>
            </div>
        `;
        return;
    }
    
    // Group tasks by priority
    const highPriority = state.tasks.filter(t => t.priority === 'high' && !t.completed);
    const mediumPriority = state.tasks.filter(t => t.priority === 'medium' && !t.completed);
    const lowPriority = state.tasks.filter(t => t.priority === 'low' && !t.completed);
    const completed = state.tasks.filter(t => t.completed);
    
    container.innerHTML = `
        <div class="task-sections">
            ${renderTaskSection('High Priority', highPriority, 'high')}
            ${renderTaskSection('Medium Priority', mediumPriority, 'medium')}
            ${renderTaskSection('Low Priority', lowPriority, 'low')}
            ${renderTaskSection('Completed', completed, 'completed')}
        </div>
    `;
}

function renderTaskSection(title, tasks, priority) {
    if (tasks.length === 0) return '';
    
    return `
        <div class="task-section">
            <h4 class="task-section-title">${title} (${tasks.length})</h4>
            <div class="task-list">
                ${tasks.map(task => `
                    <div class="task-card priority-${priority} ${task.completed ? 'completed' : ''}">
                        <div class="task-header">
                            <div class="task-info">
                                <h5>${task.title}</h5>
                                <div class="task-meta">
                                    <span class="task-subject">${task.subject?.name || 'No Subject'}</span>
                                    <span class="task-class">${task.class?.name || 'No Class'}</span>
                                </div>
                            </div>
                            <div class="task-actions">
                                <button class="btn-icon" onclick="toggleTask('${task._id}')">
                                    ${task.completed ? '✅' : '⭕'}
                                </button>
                                <button class="btn-icon" onclick="editTask('${task._id}')">✏️</button>
                            </div>
                        </div>
                        ${task.notes ? `<div class="task-notes">${task.notes}</div>` : ''}
                    </div>
                `).join('')}
            </div>
        </div>
    `;
}

async function toggleTask(taskId) {
    try {
        const response = await fetch(`${API_BASE}/tasks/${taskId}/complete`, {
            method: 'PATCH'
        });
        
        if (!response.ok) throw new Error('Failed to update task');
        
        await loadTasks();
        await loadTasksPage();
        showAlert('Task updated successfully', 'success');
    } catch (error) {
        console.error('Error updating task:', error);
        showAlert('Failed to update task', 'danger');
    }
}

async function generateDailyTasks() {
    try {
        const response = await fetch(`${API_BASE}/tasks/generate`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                startDate: new Date().toISOString().split('T')[0],
                endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
            })
        });
        
        if (!response.ok) throw new Error('Failed to generate tasks');
        
        const result = await response.json();
        showAlert(result.message, 'success');
        
        await loadTasks();
        await loadTasksPage();
    } catch (error) {
        console.error('Error generating tasks:', error);
        showAlert('Failed to generate tasks', 'danger');
    }
}

// Analytics Functions
async function loadAnalyticsPage() {
    // Load analytics data
    const [trendsResponse, forecastResponse, comparativeResponse] = await Promise.all([
        fetch(`${API_BASE}/analytics/trends?period=90`),
        fetch(`${API_BASE}/analytics/forecast`),
        fetch(`${API_BASE}/analytics/comparative?groupBy=department`)
    ]);
    
    const trends = await trendsResponse.json();
    const forecast = await forecastResponse.json();
    const comparative = await comparativeResponse.json();
    
    // Update analytics stats
    updateAnalyticsStats(trends, forecast, comparative);
    
    // Initialize analytics charts
    initializeAnalyticsCharts(trends, forecast, comparative);
}

function updateAnalyticsStats(trends, forecast, comparative) {
    // Calculate average completion rate
    const avgCompletion = trends.length > 0 
        ? trends.reduce((sum, t) => sum + t.avgProgress, 0) / trends.length 
        : 0;
    
    // Update stat cards
    const statsContainer = document.querySelector('#analytics-page .stats-grid');
    if (statsContainer) {
        statsContainer.innerHTML = `
            <div class="stat-card">
                <div class="stat-label">Average Completion Rate</div>
                <div class="stat-value">${avgCompletion.toFixed(1)}%</div>
                <div class="stat-change positive">↑ 5.2% this month</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Predicted Completion Date</div>
                <div class="stat-value">${forecast.estimatedCompletionDate ? new Date(forecast.estimatedCompletionDate).toLocaleDateString() : 'N/A'}</div>
                <div class="stat-change">${forecast.currentProgress > 80 ? 'Ahead of schedule' : 'On track'}</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Department Leader</div>
                <div class="stat-value">${comparative.data[0]?._id || 'N/A'}</div>
                <div class="stat-change positive">${comparative.data[0]?.avgProgress.toFixed(0)}% completion rate</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">At-Risk Subjects</div>
                <div class="stat-value">${state.subjects.filter(s => calculateSubjectProgress(s) < 50).length}</div>
                <div class="stat-change negative">Need immediate attention</div>
            </div>
        `;
    }
}

function calculateSubjectProgress(subject) {
    let totalTopics = 0;
    let completedTopics = 0;
    
    if (subject.chapters) {
        subject.chapters.forEach(chapter => {
            if (chapter.topics) {
                totalTopics += chapter.topics.length;
                completedTopics += chapter.topics.filter(t => t.completed).length;
            }
        });
    }
    
    return totalTopics > 0 ? (completedTopics / totalTopics) * 100 : 0;
}

// Export Functions
async function exportData(format) {
    try {
        let response;
        const exportBtn = event.target;
        exportBtn.disabled = true;
        exportBtn.textContent = 'Exporting...';
        
        switch (format) {
            case 'excel':
                response = await fetch(`${API_BASE}/export/excel`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ type: 'all', filters: {} })
                });
                break;
                
            case 'csv':
                response = await fetch(`${API_BASE}/export/csv?dataType=subjects`);
                break;
                
            case 'json':
                response = await fetch(`${API_BASE}/export/json`);
                break;
                
            default:
                throw new Error('Invalid export format');
        }
        
        if (!response.ok) throw new Error('Export failed');
        
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `syllabus-export-${new Date().toISOString().split('T')[0]}.${format}`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        showAlert(`Data exported successfully as ${format.toUpperCase()}`, 'success');
    } catch (error) {
        console.error('Export error:', error);
        showAlert('Failed to export data', 'danger');
    } finally {
        const exportBtn = event.target;
        exportBtn.disabled = false;
        exportBtn.textContent = `Export as ${format.toUpperCase()}`;
    }
}

// Modal Functions
function openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.add('active');
    }
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.remove('active');
        // Reset form if exists
        const form = modal.querySelector('form');
        if (form) {
            form.reset();
        }
    }
}

// Utility Functions
function showAlert(message, type = 'info') {
    const alertContainer = document.getElementById('alert-container') || createAlertContainer();
    
    const alert = document.createElement('div');
    alert.className = `alert alert-${type}`;
    alert.innerHTML = `
        <span>${message}</span>
        <button class="alert-close" onclick="this.parentElement.remove()">×</button>
    `;
    
    alertContainer.appendChild(alert);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (alert.parentElement) {
            alert.remove();
        }
    }, 5000);
}

function createAlertContainer() {
    const container = document.createElement('div');
    container.id = 'alert-container';
    container.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 9999; max-width: 400px;';
    document.body.appendChild(container);
    return container;
}

function showLoadingState() {
    const loader = document.createElement('div');
    loader.id = 'app-loader';
    loader.innerHTML = '<div class="spinner"></div><p>Loading...</p>';
    loader.style.cssText = 'position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(255,255,255,0.9); display: flex; flex-direction: column; align-items: center; justify-content: center; z-index: 9999;';
    document.body.appendChild(loader);
}

function hideLoadingState() {
    const loader = document.getElementById('app-loader');
    if (loader) {
        loader.remove();
    }
}

function updateTaskBadge() {
    const activeTasks = state.tasks.filter(t => !t.completed).length;
    const badge = document.querySelector('.nav-item[onclick*="tasks"] .nav-item-badge');
    if (badge) {
        badge.textContent = activeTasks;
        badge.style.display = activeTasks > 0 ? 'inline-block' : 'none';
    }
}

// Event Listeners
function setupEventListeners() {
    // Global click handler for modals
    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('modal')) {
            const modalId = e.target.id;
            closeModal(modalId);
        }
    });
    
    // Form submissions
    document.addEventListener('submit', (e) => {
        if (e.target.matches('#subjectForm')) {
            e.preventDefault();
            saveSubject();
        } else if (e.target.matches('#kpiForm')) {
            e.preventDefault();
            saveKPI();
        }
    });
    
    // Search functionality
    const searchInput = document.querySelector('.search-input');
    if (searchInput) {
        searchInput.addEventListener('input', debounce(handleSearch, 300));
    }
}

// Search functionality
function handleSearch(e) {
    const query = e.target.value.toLowerCase();
    
    // Search based on current page
    switch (state.currentPage) {
        case 'subjects':
            filterSubjects(query);
            break;
        case 'classes':
            filterClasses(query);
            break;
        case 'tasks':
            filterTasks(query);
            break;
    }
}

// Utility function for debouncing
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Initialize sidebar functions
function initializeSidebar() {
    // Mobile sidebar toggle
    const toggleBtn = document.querySelector('.btn-icon[onclick*="toggleSidebar"]');
    if (toggleBtn) {
        toggleBtn.addEventListener('click', toggleSidebar);
    }
}

function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    if (sidebar) {
        sidebar.classList.toggle('open');
    }
}

// Initialize search
function initializeSearch() {
    const searchInput = document.querySelector('.search-input');
    if (searchInput) {
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                performSearch(e.target.value);
            }
        });
    }
}

// Initialize notifications
function initializeNotifications() {
    // Check for overdue tasks
    const overdueTasks = state.tasks.filter(task => {
        if (task.completed) return false;
        const deadline = new Date(task.deadline);
        return deadline < new Date();
    });
    
    if (overdueTasks.length > 0) {
        showAlert(`You have ${overdueTasks.length} overdue tasks!`, 'warning');
    }
}

// Add KPI field in modal
function addKPIField() {
    const kpiList = document.getElementById('kpi-list');
    const newKPI = document.createElement('div');
    newKPI.className = 'kpi-item';
    newKPI.style.marginTop = '8px';
    newKPI.innerHTML = `
        <input type="text" class="form-input" placeholder="Enter KPI...">
        <button type="button" class="btn btn-sm btn-danger" onclick="this.parentElement.remove()">×</button>
    `;
    kpiList.appendChild(newKPI);
}

// Save subject with KPIs
async function saveSubject() {
    try {
        const form = document.getElementById('subjectForm');
        const formData = new FormData(form);
        
        const subjectData = {
            name: formData.get('name'),
            code: formData.get('code'),
            department: formData.get('department'),
            class: formData.get('class'),
            deadline: formData.get('deadline'),
            description: formData.get('description')
        };
        
        // Validate required fields
        if (!subjectData.name || !subjectData.code || !subjectData.class || !subjectData.deadline) {
            showAlert('Please fill in all required fields', 'warning');
            return;
        }
        
        // Save subject
        const response = await fetch(`${API_BASE}/syllabus/subjects`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(subjectData)
        });
        
        if (!response.ok) throw new Error('Failed to save subject');
        
        const subject = await response.json();
        
        // Save KPIs
        const kpiInputs = document.querySelectorAll('#kpi-list input');
        for (const input of kpiInputs) {
            if (input.value.trim()) {
                await fetch(`${API_BASE}/kpis`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        subject: subject._id,
                        title: input.value.trim(),
                        target: 100,
                        deadline: subjectData.deadline,
                        priority: 'medium'
                    })
                });
            }
        }
        
        // Reload data and close modal
        await Promise.all([loadSubjects(), loadKPIs()]);
        closeModal('addSubjectModal');
        showAlert('Subject created successfully!', 'success');
        
        // Refresh current page
        loadPageContent(state.currentPage);
    } catch (error) {
        console.error('Error saving subject:', error);
        showAlert('Failed to save subject', 'danger');
    }
}

// Update openModal to populate class dropdown
const originalOpenModal = window.openModal;
window.openModal = function(modalId) {
    originalOpenModal(modalId);
    
    // If opening add subject modal, populate classes
    if (modalId === 'addSubjectModal') {
        const classSelect = document.getElementById('subjectClass');
        if (classSelect) {
            classSelect.innerHTML = '<option value="">Select Class</option>';
            state.classes.forEach(cls => {
                const option = document.createElement('option');
                option.value = cls._id;
                option.textContent = cls.name;
                classSelect.appendChild(option);
            });
        }
    }
};

// Report Builder Functions
function initializeReportBuilder() {
    const widgets = document.querySelectorAll('.widget-item');
    const canvas = document.getElementById('report-canvas');
    
    if (!widgets.length || !canvas) return;
    
    widgets.forEach(widget => {
        widget.addEventListener('dragstart', handleDragStart);
        widget.addEventListener('dragend', handleDragEnd);
    });
    
    canvas.addEventListener('dragover', handleDragOver);
    canvas.addEventListener('drop', handleDrop);
}

function handleDragStart(e) {
    e.dataTransfer.effectAllowed = 'copy';
    e.dataTransfer.setData('text/plain', e.target.textContent);
    e.target.classList.add('dragging');
}

function handleDragEnd(e) {
    e.target.classList.remove('dragging');
}

function handleDragOver(e) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'copy';
}

function handleDrop(e) {
    e.preventDefault();
    const widgetText = e.dataTransfer.getData('text/plain');
    const canvas = document.getElementById('report-canvas');
    
    // Clear placeholder if it exists
    if (canvas.querySelector('div[style*="text-align: center"]')) {
        canvas.innerHTML = '';
    }
    
    // Add widget to canvas
    const widget = createReportWidget(widgetText);
    canvas.appendChild(widget);
}

function createReportWidget(type) {
    const widget = document.createElement('div');
    widget.className = 'card report-widget';
    widget.innerHTML = `
        <div class="card-header">
            <h3 class="card-title">${type}</h3>
            <div class="widget-actions">
                <button class="btn-icon btn-sm" onclick="configureWidget(this)">⚙️</button>
                <button class="btn-icon btn-sm" onclick="this.closest('.report-widget').remove()">×</button>
            </div>
        </div>
        <div class="widget-content" style="min-height: 200px;">
            <div class="widget-placeholder">
                <canvas id="widget-${Date.now()}"></canvas>
            </div>
        </div>
    `;
    
    // Initialize widget content based on type
    setTimeout(() => initializeWidgetContent(widget, type), 100);
    
    return widget;
}

function initializeWidgetContent(widget, type) {
    const canvas = widget.querySelector('canvas');
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    
    // Create sample chart based on widget type
    switch (type.trim()) {
        case '📊 Progress Chart':
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
                    datasets: [{
                        label: 'Progress',
                        data: [20, 35, 50, 65],
                        borderColor: '#6366f1',
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
            break;
            
        case '📈 Trend Analysis':
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr'],
                    datasets: [{
                        label: 'Completion Rate',
                        data: [65, 70, 75, 82],
                        backgroundColor: '#8b5cf6'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
            break;
            
        case '🎯 KPI Summary':
            // Replace canvas with KPI summary
            const kpiSummary = document.createElement('div');
            kpiSummary.innerHTML = `
                <div style="padding: 20px;">
                    <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 16px;">
                        <div style="text-align: center;">
                            <div style="font-size: 32px; font-weight: bold; color: #10b981;">85%</div>
                            <div style="color: #666;">KPIs Achieved</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 32px; font-weight: bold; color: #f59e0b;">15</div>
                            <div style="color: #666;">Pending KPIs</div>
                        </div>
                    </div>
                </div>
            `;
            canvas.parentElement.replaceChild(kpiSummary, canvas);
            break;
    }
}

// Export to different formats
async function loadExportPage() {
    const container = document.querySelector('#export-page');
    if (!container) return;
    
    container.innerHTML = `
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Export Data</h3>
            </div>
            <div class="card-body">
                <p style="margin-bottom: 24px;">Choose your preferred format to export the syllabus tracker data:</p>
                
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px;">
                    <div class="export-option">
                        <button class="btn btn-primary" onclick="exportData('excel')" style="width: 100%; padding: 20px;">
                            📊 Export as Excel
                        </button>
                        <p style="margin-top: 8px; font-size: 14px; color: #666;">
                            Complete data with multiple sheets
                        </p>
                    </div>
                    
                    <div class="export-option">
                        <button class="btn btn-primary" onclick="exportData('csv')" style="width: 100%; padding: 20px;">
                            📄 Export as CSV
                        </button>
                        <p style="margin-top: 8px; font-size: 14px; color: #666;">
                            Simple format for spreadsheets
                        </p>
                    </div>
                    
                    <div class="export-option">
                        <button class="btn btn-primary" onclick="exportData('json')" style="width: 100%; padding: 20px;">
                            🔧 Export as JSON
                        </button>
                        <p style="margin-top: 8px; font-size: 14px; color: #666;">
                            Developer-friendly format
                        </p>
                    </div>
                    
                    <div class="export-option">
                        <button class="btn btn-primary" onclick="exportData('pdf')" style="width: 100%; padding: 20px;">
                            📑 Export as PDF
                        </button>
                        <p style="margin-top: 8px; font-size: 14px; color: #666;">
                            Formatted report for printing
                        </p>
                    </div>
                </div>
                
                <div style="margin-top: 32px; padding: 20px; background: #f8fafc; border-radius: 8px;">
                    <h4 style="margin-bottom: 12px;">Advanced Export Options</h4>
                    <form id="advancedExportForm">
                        <div class="form-group">
                            <label class="form-label">Date Range</label>
                            <div style="display: flex; gap: 12px;">
                                <input type="date" class="form-input" name="startDate">
                                <input type="date" class="form-input" name="endDate">
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">Include Data</label>
                            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 8px;">
                                <label><input type="checkbox" checked> Subjects</label>
                                <label><input type="checkbox" checked> Chapters & Topics</label>
                                <label><input type="checkbox" checked> KPIs</label>
                                <label><input type="checkbox" checked> Progress History</label>
                                <label><input type="checkbox" checked> Tasks</label>
                                <label><input type="checkbox" checked> Analytics</label>
                            </div>
                        </div>
                        
                        <button type="submit" class="btn btn-primary">Export with Filters</button>
                    </form>
                </div>
            </div>
        </div>
    `;
}

// Save class
async function saveClass() {
    try {
        const form = document.getElementById('classForm');
        const formData = new FormData(form);
        
        const classData = {
            name: formData.get('name'),
            description: formData.get('description')
        };
        
        if (!classData.name) {
            showAlert('Please enter a class name', 'warning');
            return;
        }
        
        const response = await fetch(`${API_BASE}/classes`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(classData)
        });
        
        if (!response.ok) throw new Error('Failed to save class');
        
        await loadClasses();
        closeModal('addClassModal');
        showAlert('Class created successfully!', 'success');
        
        // Refresh current page if on classes page
        if (state.currentPage === 'classes') {
            await loadClassesPage();
        }
    } catch (error) {
        console.error('Error saving class:', error);
        showAlert('Failed to save class', 'danger');
    }
}

// Save chapter
async function saveChapter() {
    try {
        const form = document.getElementById('chapterForm');
        const formData = new FormData(form);
        
        const chapterData = {
            subject: document.getElementById('chapterSubjectId').value,
            title: formData.get('title'),
            number: parseInt(formData.get('number')),
            deadline: formData.get('deadline'),
            description: formData.get('description')
        };
        
        if (!chapterData.title || !chapterData.number || !chapterData.deadline) {
            showAlert('Please fill in all required fields', 'warning');
            return;
        }
        
        const response = await fetch(`${API_BASE}/syllabus/chapters`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(chapterData)
        });
        
        if (!response.ok) throw new Error('Failed to save chapter');
        
        await loadSubjects();
        closeModal('addChapterModal');
        showAlert('Chapter created successfully!', 'success');
        
        // Refresh current page
        loadPageContent(state.currentPage);
    } catch (error) {
        console.error('Error saving chapter:', error);
        showAlert('Failed to save chapter', 'danger');
    }
}

// Save topic
async function saveTopic() {
    try {
        const form = document.getElementById('topicForm');
        const formData = new FormData(form);
        
        const topicData = {
            chapter: document.getElementById('topicChapterId').value,
            title: formData.get('title'),
            deadline: formData.get('deadline'),
            notes: formData.get('notes')
        };
        
        if (!topicData.title || !topicData.deadline) {
            showAlert('Please fill in all required fields', 'warning');
            return;
        }
        
        const response = await fetch(`${API_BASE}/syllabus/topics`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(topicData)
        });
        
        if (!response.ok) throw new Error('Failed to save topic');
        
        await loadSubjects();
        closeModal('addTopicModal');
        showAlert('Topic created successfully!', 'success');
        
        // Refresh current page
        loadPageContent(state.currentPage);
    } catch (error) {
        console.error('Error saving topic:', error);
        showAlert('Failed to save topic', 'danger');
    }
}

// Update subject
async function updateSubject() {
    try {
        const form = document.getElementById('editSubjectForm');
        const formData = new FormData(form);
        const subjectId = document.getElementById('editSubjectId').value;
        
        const subjectData = {
            name: formData.get('name'),
            code: formData.get('code'),
            department: formData.get('department'),
            class: formData.get('class'),
            deadline: formData.get('deadline'),
            description: formData.get('description')
        };
        
        if (!subjectData.name || !subjectData.code || !subjectData.class) {
            showAlert('Please fill in all required fields', 'warning');
            return;
        }
        
        const response = await fetch(`${API_BASE}/syllabus/subjects/${subjectId}`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(subjectData)
        });
        
        if (!response.ok) throw new Error('Failed to update subject');
        
        await loadSubjects();
        closeModal('editSubjectModal');
        showAlert('Subject updated successfully!', 'success');
        
        // Refresh current page
        loadPageContent(state.currentPage);
    } catch (error) {
        console.error('Error updating subject:', error);
        showAlert('Failed to update subject', 'danger');
    }
}

// Open chapter modal
function openAddChapterModal(subjectId) {
    document.getElementById('chapterSubjectId').value = subjectId;
    openModal('addChapterModal');
}

// Open topic modal
function openAddTopicModal(chapterId) {
    document.getElementById('topicChapterId').value = chapterId;
    openModal('addTopicModal');
}

// Edit subject
function editSubject(subjectId) {
    const subject = state.subjects.find(s => s._id === subjectId);
    if (!subject) return;
    
    document.getElementById('editSubjectId').value = subject._id;
    document.getElementById('editSubjectName').value = subject.name;
    document.getElementById('editSubjectCode').value = subject.code;
    document.getElementById('editSubjectDepartment').value = subject.department;
    
    // Populate classes dropdown
    const classSelect = document.getElementById('editSubjectClass');
    classSelect.innerHTML = '<option value="">Select Class</option>';
    state.classes.forEach(cls => {
        const option = document.createElement('option');
        option.value = cls._id;
        option.textContent = cls.name;
        if (subject.class && subject.class._id === cls._id) {
            option.selected = true;
        }
        classSelect.appendChild(option);
    });
    
    document.getElementById('editSubjectDeadline').value = subject.deadline ? subject.deadline.split('T')[0] : '';
    document.getElementById('editSubjectDescription').value = subject.description || '';
    
    openModal('editSubjectModal');
}

// Delete functions
async function deleteSubject(subjectId) {
    if (!confirm('Are you sure you want to delete this subject and all its chapters/topics?')) return;
    
    try {
        const response = await fetch(`${API_BASE}/syllabus/subjects/${subjectId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('Failed to delete subject');
        
        await loadSubjects();
        showAlert('Subject deleted successfully!', 'success');
        loadPageContent(state.currentPage);
    } catch (error) {
        console.error('Error deleting subject:', error);
        showAlert('Failed to delete subject', 'danger');
    }
}

async function deleteChapter(chapterId) {
    if (!confirm('Are you sure you want to delete this chapter and all its topics?')) return;
    
    try {
        const response = await fetch(`${API_BASE}/syllabus/chapters/${chapterId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('Failed to delete chapter');
        
        await loadSubjects();
        showAlert('Chapter deleted successfully!', 'success');
        loadPageContent(state.currentPage);
    } catch (error) {
        console.error('Error deleting chapter:', error);
        showAlert('Failed to delete chapter', 'danger');
    }
}

async function deleteTopic(topicId) {
    if (!confirm('Are you sure you want to delete this topic?')) return;
    
    try {
        const response = await fetch(`${API_BASE}/syllabus/topics/${topicId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('Failed to delete topic');
        
        await loadSubjects();
        showAlert('Topic deleted successfully!', 'success');
        loadPageContent(state.currentPage);
    } catch (error) {
        console.error('Error deleting topic:', error);
        showAlert('Failed to delete topic', 'danger');
    }
}

// Load subjects page with full management
async function loadSubjectsPageComplete() {
    const container = document.getElementById('subject-kpi-list');
    if (!container) return;
    
    container.innerHTML = '';
    
    for (const subject of state.subjects) {
        const subjectKPIs = state.kpis.filter(k => k.subject === subject._id);
        const achievedCount = subjectKPIs.filter(k => k.achieved).length;
        const kpiStatus = achievedCount === subjectKPIs.length ? 'achieved' : 
                         achievedCount > 0 ? 'pending' : 'failed';
        
        // Calculate subject progress
        let totalTopics = 0;
        let completedTopics = 0;
        
        if (subject.chapters) {
            subject.chapters.forEach(chapter => {
                if (chapter.topics) {
                    totalTopics += chapter.topics.length;
                    completedTopics += chapter.topics.filter(t => t.completed).length;
                }
            });
        }
        
        const progress = totalTopics > 0 ? (completedTopics / totalTopics) * 100 : 0;
        
        const subjectCard = document.createElement('div');
        subjectCard.className = 'card';
        subjectCard.style.marginBottom = '24px';
        
        subjectCard.innerHTML = `
            <div class="card-header">
                <div>
                    <h3 class="card-title">${subject.name} - ${subject.class?.name || 'No Class'}</h3>
                    <div style="color: var(--gray-600); font-size: 14px; margin-top: 4px;">
                        Code: ${subject.code} | Department: ${subject.department} | Deadline: ${new Date(subject.deadline).toLocaleDateString()}
                    </div>
                </div>
                <div style="display: flex; gap: 8px;">
                    <button class="btn btn-secondary btn-sm" onclick="editSubject('${subject._id}')">Edit</button>
                    <button class="btn btn-danger btn-sm" onclick="deleteSubject('${subject._id}')">Delete</button>
                </div>
            </div>
            
            <div style="padding: 20px;">
                <!-- KPIs Section -->
                <div style="margin-bottom: 24px;">
                    <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 16px;">
                        <h4 style="font-size: 16px; font-weight: 600;">Key Performance Indicators</h4>
                        <div class="kpi-status ${kpiStatus}" style="margin-left: auto;">${kpiStatus === 'achieved' ? '✓' : kpiStatus === 'pending' ? '⏱' : '✗'}</div>
                    </div>
                    
                    <div class="progress-container">
                        <div class="progress-header">
                            <span class="progress-label">Overall Progress</span>
                            <span class="progress-value">${Math.round(progress)}%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${progress}%"></div>
                        </div>
                    </div>
                    
                    <div class="kpi-items" style="margin-top: 16px;">
                        ${subjectKPIs.map(kpi => `
                            <div class="kpi-item">
                                <input type="checkbox" class="kpi-checkbox" 
                                       ${kpi.achieved ? 'checked' : ''} 
                                       onchange="updateKPI('${kpi._id}', this.checked)">
                                <span class="kpi-label">${kpi.title}</span>
                            </div>
                        `).join('')}
                    </div>
                    
                    <button class="btn btn-secondary btn-sm" style="margin-top: 12px;" onclick="openAddKPIModal('${subject._id}')">
                        + Add KPI
                    </button>
                </div>
                
                <!-- Chapters Section -->
                <div>
                    <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 16px;">
                        <h4 style="font-size: 16px; font-weight: 600;">Chapters (${subject.chapters?.length || 0})</h4>
                        <button class="btn btn-primary btn-sm" onclick="openAddChapterModal('${subject._id}')">
                            + Add Chapter
                        </button>
                    </div>
                    
                    <div class="chapters-list">
                        ${renderChaptersForManagement(subject.chapters || [])}
                    </div>
                </div>
            </div>
        `;
        
        container.appendChild(subjectCard);
    }
}

function renderChaptersForManagement(chapters) {
    if (chapters.length === 0) {
        return '<p style="color: var(--gray-500); text-align: center; padding: 20px;">No chapters added yet</p>';
    }
    
    return chapters.sort((a, b) => a.number - b.number).map(chapter => {
        const allCompleted = chapter.topics?.length > 0 && chapter.topics.every(t => t.completed);
        
        return `
            <div style="border: 1px solid var(--gray-200); border-radius: 8px; padding: 16px; margin-bottom: 12px; ${allCompleted ? 'background: var(--gray-50);' : ''}">
                <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 12px;">
                    <div>
                        <h5 style="font-weight: 600; margin: 0;">Chapter ${chapter.number}: ${chapter.title}</h5>
                        <div style="font-size: 13px; color: var(--gray-600); margin-top: 4px;">
                            Deadline: ${new Date(chapter.deadline).toLocaleDateString()} | 
                            Topics: ${chapter.topics?.length || 0} | 
                            Status: ${chapter.status}
                        </div>
                    </div>
                    <div style="display: flex; gap: 8px;">
                        <button class="btn-icon" onclick="editChapter('${chapter._id}')">✏️</button>
                        <button class="btn-icon" onclick="deleteChapter('${chapter._id}')">🗑️</button>
                    </div>
                </div>
                
                <div style="margin-left: 20px;">
                    ${renderTopicsForManagement(chapter.topics || [])}
                    <button class="btn btn-secondary btn-sm" style="margin-top: 8px;" onclick="openAddTopicModal('${chapter._id}')">
                        + Add Topic
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

function renderTopicsForManagement(topics) {
    if (topics.length === 0) {
        return '<p style="color: var(--gray-500); font-size: 14px;">No topics added yet</p>';
    }
    
    return topics.map(topic => {
        const isOverdue = !topic.completed && new Date(topic.deadline) < new Date();
        
        return `
            <div style="display: flex; align-items: center; gap: 12px; padding: 8px; border-radius: 6px; margin-bottom: 8px; background: ${topic.completed ? 'var(--gray-50)' : 'white'};">
                <input type="checkbox" ${topic.completed ? 'checked' : ''} 
                       onchange="toggleTopicCompletion('${topic._id}')">
                <div style="flex: 1;">
                    <span style="${topic.completed ? 'text-decoration: line-through; color: var(--gray-500);' : ''} ${isOverdue ? 'color: var(--danger);' : ''}">
                        ${topic.title}
                    </span>
                    <div style="font-size: 12px; color: var(--gray-600);">
                        Due: ${new Date(topic.deadline).toLocaleDateString()} ${isOverdue ? '(Overdue!)' : ''}
                    </div>
                </div>
                <div style="display: flex; gap: 4px;">
                    <button class="btn-icon" onclick="editTopic('${topic._id}')">✏️</button>
                    <button class="btn-icon" onclick="deleteTopic('${topic._id}')">🗑️</button>
                </div>
            </div>
        `;
    }).join('');
}

async function toggleTopicCompletion(topicId) {
    try {
        const response = await fetch(`${API_BASE}/syllabus/topics/${topicId}/toggle`, {
            method: 'PATCH'
        });
        
        if (!response.ok) throw new Error('Failed to update topic');
        
        await loadSubjects();
        loadPageContent(state.currentPage);
        showAlert('Topic status updated!', 'success');
    } catch (error) {
        console.error('Error updating topic:', error);
        showAlert('Failed to update topic status', 'danger');
    }
}

// Classes Management
async function loadClassesPage() {
    const container = document.getElementById('classes-list');
    if (!container) return;
    
    if (state.classes.length === 0) {
        container.innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 60px 20px;">
                <h3 style="color: var(--gray-500);">No classes found</h3>
                <p style="color: var(--gray-400); margin-top: 8px;">Create your first class to get started</p>
                <button class="btn btn-primary" style="margin-top: 16px;" onclick="openModal('addClassModal')">
                    + Add First Class
                </button>
            </div>
        `;
        return;
    }
    
    container.innerHTML = state.classes.map(cls => {
        const subjectsInClass = state.subjects.filter(s => s.class && s.class._id === cls._id);
        
        return `
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">${cls.name}</h3>
                    <div style="display: flex; gap: 8px;">
                        <button class="btn btn-secondary btn-sm" onclick="editClass('${cls._id}')">Edit</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteClass('${cls._id}')">Delete</button>
                    </div>
                </div>
                <div style="padding: 20px;">
                    <p style="color: var(--gray-600); margin-bottom: 16px;">
                        ${cls.description || 'No description provided'}
                    </p>
                    <div style="border-top: 1px solid var(--gray-200); padding-top: 16px;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <span style="font-weight: 600;">Subjects</span>
                            <span style="color: var(--primary); font-weight: 600;">${subjectsInClass.length}</span>
                        </div>
                        ${subjectsInClass.length > 0 ? `
                            <div style="margin-top: 12px;">
                                ${subjectsInClass.map(s => `
                                    <div style="padding: 8px; background: var(--gray-50); border-radius: 6px; margin-bottom: 8px;">
                                        ${s.name} (${s.code})
                                    </div>
                                `).join('')}
                            </div>
                        ` : '<p style="color: var(--gray-500); margin-top: 8px; font-size: 14px;">No subjects assigned yet</p>'}
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

function filterClasses(searchTerm) {
    const cards = document.querySelectorAll('#classes-list .card');
    const term = searchTerm.toLowerCase();
    
    cards.forEach(card => {
        const className = card.querySelector('.card-title').textContent.toLowerCase();
        const description = card.querySelector('p').textContent.toLowerCase();
        
        if (className.includes(term) || description.includes(term)) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}

async function editClass(classId) {
    const cls = state.classes.find(c => c._id === classId);
    if (!cls) return;
    
    // Populate form
    const form = document.getElementById('classForm');
    form.elements.name.value = cls.name;
    form.elements.description.value = cls.description || '';
    
    // Store the ID for update
    form.dataset.editId = classId;
    
    // Change modal title
    document.querySelector('#addClassModal .modal-title').textContent = 'Edit Class';
    
    openModal('addClassModal');
}

async function deleteClass(classId) {
    const cls = state.classes.find(c => c._id === classId);
    const subjectsInClass = state.subjects.filter(s => s.class && s.class._id === classId);
    
    if (subjectsInClass.length > 0) {
        showAlert(`Cannot delete "${cls.name}" - it has ${subjectsInClass.length} subjects assigned`, 'warning');
        return;
    }
    
    if (!confirm(`Are you sure you want to delete "${cls.name}"?`)) return;
    
    try {
        const response = await fetch(`${API_BASE}/classes/${classId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('Failed to delete class');
        
        await loadClasses();
        await loadClassesPage();
        showAlert('Class deleted successfully!', 'success');
    } catch (error) {
        console.error('Error deleting class:', error);
        showAlert('Failed to delete class', 'danger');
    }
}

// Update the saveClass function to handle both create and edit
window.saveClass = async function() {
    try {
        const form = document.getElementById('classForm');
        const formData = new FormData(form);
        
        const classData = {
            name: formData.get('name'),
            description: formData.get('description')
        };
        
        if (!classData.name) {
            showAlert('Please enter a class name', 'warning');
            return;
        }
        
        const editId = form.dataset.editId;
        const isEdit = !!editId;
        
        const response = await fetch(`${API_BASE}/classes${isEdit ? '/' + editId : ''}`, {
            method: isEdit ? 'PATCH' : 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(classData)
        });
        
        if (!response.ok) throw new Error(`Failed to ${isEdit ? 'update' : 'save'} class`);
        
        // Clear edit ID
        delete form.dataset.editId;
        
        // Reset modal title
        document.querySelector('#addClassModal .modal-title').textContent = 'Add New Class';
        
        await loadClasses();
        closeModal('addClassModal');
        showAlert(`Class ${isEdit ? 'updated' : 'created'} successfully!`, 'success');
        
        // Refresh current page if on classes page
        if (state.currentPage === 'classes') {
            await loadClassesPage();
        }
    } catch (error) {
        console.error('Error saving class:', error);
        showAlert('Failed to save class', 'danger');
    }
};
window.toggleSidebar = toggleSidebar;
window.openModal = openModal;
window.closeModal = closeModal;
window.addKPIField = addKPIField;
window.updateKPI = updateKPI;
window.toggleTask = toggleTask;
window.generateDailyTasks = generateDailyTasks;
window.exportData = exportData;
window.editTask = (taskId) => console.log('Edit task:', taskId);
window.viewSubjectDetails = (subjectId) => console.log('View subject details:', subjectId);
window.configureWidget = (btn) => console.log('Configure widget');
window.saveClass = saveClass;
window.saveChapter = saveChapter;
window.saveTopic = saveTopic;
window.updateSubject = updateSubject;
window.openAddChapterModal = openAddChapterModal;
window.openAddTopicModal = openAddTopicModal;
window.editSubject = editSubject;
window.deleteSubject = deleteSubject;
window.deleteChapter = deleteChapter;
window.deleteTopic = deleteTopic;
window.toggleTopicCompletion = toggleTopicCompletion;
// Initialize and export functions
window.showPage = showPage;
window.toggleSidebar = toggleSidebar;
window.openModal = openModal;
window.closeModal = closeModal;
window.addKPIField = addKPIField;
window.updateKPI = updateKPI;
window.toggleTask = toggleTask;
window.generateDailyTasks = generateDailyTasks;
window.exportData = exportData;
window.editTask = (taskId) => console.log('Edit task:', taskId);
window.viewSubjectDetails = (subjectId) => console.log('View subject details:', subjectId);
window.configureWidget = (btn) => console.log('Configure widget');
window.saveChapter = saveChapter;
window.saveTopic = saveTopic;
window.updateSubject = updateSubject;
window.openAddChapterModal = openAddChapterModal;
window.openAddTopicModal = openAddTopicModal;
window.editSubject = editSubject;
window.deleteSubject = deleteSubject;
window.deleteChapter = deleteChapter;
window.deleteTopic = deleteTopic;
window.toggleTopicCompletion = toggleTopicCompletion;
window.editClass = editClass;
window.deleteClass = deleteClass;
window.filterClasses = filterClasses;
window.editSubjectKPIs = (subjectId) => {
    // Redirect to KPI management for this subject
    console.log('Edit KPIs for subject:', subjectId);
};
window.showTab = (tabId) => {
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    document.getElementById(tabId).classList.add('active');
    
    document.querySelectorAll('.tab-item').forEach(item => {
        item.classList.remove('active');
    });
    event.currentTarget.classList.add('active');
};