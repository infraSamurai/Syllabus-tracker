import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import { connectDB } from './config/database';
import cron from 'node-cron';
import taskGenerationController from './controllers/taskGeneration.controller';

// Import routes
import authRoutes from './routes/auth.routes';
import syllabusRoutes from './routes/syllabus.routes';
import adminRoutes from './routes/admin.routes';
import classRoutes from './routes/class.routes';
import reportRoutes from './routes/report.routes';
import taskRoutes from './routes/task.routes';
import pdfRoutes from './routes/pdf.routes';
import kpiRoutes from './routes/kpi.routes';
import milestoneRoutes from './routes/milestone.routes';
import scheduledReportRoutes from './routes/scheduledReport.routes';
import analyticsRoutes from './routes/analytics.routes';
import exportRoutes from './routes/export.routes';
import topicRoutes from './routes/topic.routes';
import subjectRoutes from './routes/subject.routes';
// Removed empty teacher routes import

import errorMiddleware from './middleware/error.middleware';

const app = express();

// Middleware
app.use(express.json());
app.use(cors());
app.use(helmet());

// Connect to DB with error handling
connectDB().catch((error) => {
  console.error('Failed to connect to database:', error);
  process.exit(1);
});

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/syllabus', syllabusRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/classes', classRoutes);
app.use('/api/reports', reportRoutes);
app.use('/api/tasks', taskRoutes);
app.use('/api/pdf', pdfRoutes);
app.use('/api/kpis', kpiRoutes);
app.use('/api/milestones', milestoneRoutes);
app.use('/api/scheduled-reports', scheduledReportRoutes);
app.use('/api/analytics', analyticsRoutes);
app.use('/api/export', exportRoutes);
app.use('/api/topics', topicRoutes);
app.use('/api/subjects', subjectRoutes);

// Register task generation routes
const taskGenerationRouter = express.Router();
taskGenerationRouter.post('/daily', (req, res) => taskGenerationController.generateDailyTasks(req, res));
taskGenerationRouter.post('/weekly', (req, res) => taskGenerationController.generateWeeklyTasks(req, res));
taskGenerationRouter.post('/monthly', (req, res) => taskGenerationController.generateMonthlyTasks(req, res));
taskGenerationRouter.post('/all', (req, res) => taskGenerationController.generateAllTasks(req, res));
taskGenerationRouter.get('/config', (req, res) => taskGenerationController.getConfig(req, res));
taskGenerationRouter.post('/config', (req, res) => taskGenerationController.updateConfig(req, res));
taskGenerationRouter.get('/tasks', (req, res) => taskGenerationController.getGeneratedTasks(req, res));
taskGenerationRouter.patch('/tasks/:id', (req, res) => taskGenerationController.updateTask(req, res));
taskGenerationRouter.get('/stats', (req, res) => taskGenerationController.getTaskStats(req, res));
taskGenerationRouter.post('/cleanup', (req, res) => taskGenerationController.cleanupOldTasks(req, res));
taskGenerationRouter.post('/cleanup-duplicates', (req, res) => taskGenerationController.cleanupDuplicateTasks(req, res));
app.use('/api/task-generation', taskGenerationRouter);

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// Error handling middleware
app.use(errorMiddleware);

// Scheduled jobs for automatic task generation
import taskGenerationService from './services/taskGeneration.service';
cron.schedule('0 0 * * *', async () => { // Every day at midnight
  await taskGenerationService.generateDailyTasks();
  console.log('⏰ Daily tasks generated by cron');
});
cron.schedule('0 0 * * 1', async () => { // Every Monday at midnight
  await taskGenerationService.generateWeeklyTasks();
  console.log('⏰ Weekly tasks generated by cron');
});
cron.schedule('0 0 1 * *', async () => { // First day of month at midnight
  await taskGenerationService.generateMonthlyTasks();
  console.log('⏰ Monthly tasks generated by cron');
});

const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

export default app;